<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>进阶:职工管理系统</title>
      <link href="/2022/05/16/%E8%BF%9B%E9%98%B6-%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/05/16/%E8%BF%9B%E9%98%B6-%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习了有关于c++的面向对象的基本知识，跟着老师写了一个职工管理系统，这个管理系统的关键，就是解决数据存放的问题，因为学了面向对象之后，会有不同的对象要存放进数组，但是每个对象类型都不一样，所以可以采用多态的特性，存放父类指针的方式进行实现</p><h3 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h3><h4 id="职工管理"><a href="#职工管理" class="headerlink" title="职工管理"></a>职工管理</h4><p>staffmanager.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;staff.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME <span class="string">&quot;TempFile.txt&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StaffManager</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">StaffManager</span>();</span><br><span class="line"><span class="comment">//面板</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showMenu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exitSystem</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//添加职工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addStaff</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//展示信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//查找对象是否为空</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isEmpty</span><span class="params">(<span class="type">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">//更改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mod_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//清除文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clean_File</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//统计人数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">StaffManager</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置一个标识字段，如果文件为空为true,反之为false</span></span><br><span class="line"><span class="type">bool</span> FileisEmpty;</span><br><span class="line"><span class="comment">//设置数组长度</span></span><br><span class="line"><span class="type">int</span> managerSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用一个数组保存所有的父类指针staff*，用父类指针再去指向子类对象</span></span><br><span class="line"><span class="comment">//要将所有的数据存放到一个数组中去，但是这个数组中的元素类型不一致，就可以利用多态的特性，因为他们的父类指针都是一样的，通过相同的父类指针，指向不同的子类对象，因此数组中可以存同一类型-&gt;父类的指针类型，即本案例中的Staff*型，即new *Staff[]，开辟到堆上，new就是一个*的类型，因此需要用一个二级指针进行指向，为Staff** staffArr = new *Staff[]</span></span><br><span class="line">Staff** staffArr;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>staffmanager.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;staffManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">StaffManager::<span class="built_in">StaffManager</span>() &#123;</span><br><span class="line"><span class="comment">//文件不存在</span></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line"><span class="comment">//is_open判断是否读完</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line"><span class="comment">//提示信息，可以被注释掉</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;managerSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileisEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件存在但是是空文件</span></span><br><span class="line"><span class="comment">//一个字符一个字符读取，读取到第一个空字符就停止</span></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="comment">//eof-&gt;end of file，表示到文件结尾</span></span><br><span class="line"><span class="keyword">if</span> (ifs.<span class="built_in">eof</span>()) &#123;</span><br><span class="line"><span class="comment">//提示信息，可以被注释掉</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件为空&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;managerSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileisEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当文件存在，记录当前文件的人数</span></span><br><span class="line"><span class="type">int</span> num = <span class="keyword">this</span>-&gt;<span class="built_in">getNum</span>();</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;职工人数:&quot; &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将当前人数赋值给数组</span></span><br><span class="line"><span class="keyword">this</span>-&gt;managerSize = num;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟空间</span></span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr = <span class="keyword">new</span> Staff * [<span class="keyword">this</span>-&gt;managerSize];</span><br><span class="line"><span class="comment">//初始化员工</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">init_Emp</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::init_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建输出流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//打开文件进行读操作</span></span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> dept;</span><br><span class="line"><span class="comment">//设置下标</span></span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dept) &#123;</span><br><span class="line">Staff* staff = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//创建不同的对象</span></span><br><span class="line"><span class="keyword">if</span> (dept == <span class="number">1</span>) &#123;</span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">Boss</span>(id, name, dept);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dept == <span class="number">2</span>) &#123;</span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">Manager</span>(id, name, dept);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">SimpleStaff</span>(id, name, dept);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将不同对象的指针存放在数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[index] = staff;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭输出流文件</span></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//面板展示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::showMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*************************************************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*********************欢迎使用职工管理系统********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************0.退出管理程序************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************1.增加职员信息************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************2.显示职员信息************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************3.删除离职员工************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************4.修改职工信息************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************5.查找职工信息************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************6.排序职工信息************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************7.清空职工信息************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*************************************************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::exitSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认退出吗?(1退出/2不退出)&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加人员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::addStaff</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//要添加的人数</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要加入的员工人数&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; size;</span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//新空间的人数=原空间+新加的</span></span><br><span class="line"><span class="type">int</span> newSize = <span class="keyword">this</span>-&gt;managerSize + size;</span><br><span class="line"><span class="comment">//开辟空间</span></span><br><span class="line"><span class="comment">//数组中的每个元素存放Staff*的指针，多态特性，父类指针指向不同的子类对象展现出不同形态</span></span><br><span class="line"><span class="comment">//new的类型是*，new*的类型是**，开辟新空间</span></span><br><span class="line">Staff** newSpace = <span class="keyword">new</span> Staff * [newSize];</span><br><span class="line"><span class="comment">//当初始长度不为空时，拷贝原来的数据</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将老数据拷贝到新数据中去</span></span><br><span class="line">newSpace[i] = <span class="keyword">this</span>-&gt;staffArr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> dept;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;位职工的编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;位职工的姓名:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择职位&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.老板&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.程序员&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个父类指针</span></span><br><span class="line">Staff* staff = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">switch</span> (dept) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//指向子类对象</span></span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">Boss</span>(id, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">Manager</span>(id, name, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">SimpleStaff</span>(id, name, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存到数组中，该元素位置应该是原有大小加上i（从0开始）</span></span><br><span class="line">newSpace[<span class="keyword">this</span>-&gt;managerSize + i] = staff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放原有的空间</span></span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;staffArr;</span><br><span class="line"><span class="comment">//指向新空间</span></span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr = newSpace;</span><br><span class="line"><span class="comment">//更新人数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;managerSize = newSize;</span><br><span class="line"><span class="comment">//将文件是否为空指向false</span></span><br><span class="line"><span class="keyword">this</span>-&gt;FileisEmpty = <span class="literal">false</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功 &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; 个人&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据保存到文件的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::save</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建输入流对象</span></span><br><span class="line">ofstream ofs;</span><br><span class="line"><span class="comment">//写文件</span></span><br><span class="line">ofs.<span class="built_in">open</span>(FILENAME, ios::out);</span><br><span class="line"><span class="comment">//通过循环遍历数组中的数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将数据写入到文件中，以空格的形式隔开</span></span><br><span class="line">ofs &lt;&lt; <span class="keyword">this</span>-&gt;staffArr[i]-&gt;id &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; <span class="keyword">this</span>-&gt;staffArr[i]-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; <span class="keyword">this</span>-&gt;staffArr[i]-&gt;dept &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过记录文件中有多少人</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StaffManager::getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建输出流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> dept;</span><br><span class="line"><span class="comment">//记录读的人数，刚开始为0</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//当id,name,dept都存在时才进行计数操作</span></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dept) &#123;</span><br><span class="line"><span class="comment">//当每读取一个人是num++</span></span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示职员信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::show_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileisEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//通过遍历数组，数组大小为managersize</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[i]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过id来查找员工，看是否存在</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StaffManager::isEmpty</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr[i]-&gt;id == id) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除某个员工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::delete_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileisEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要删除的员工号&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">isEmpty</span>(id);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;员工不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//找到要删除的员工号，从该位后面一位开始依次向前移动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ret; i &lt; <span class="keyword">this</span>-&gt;managerSize<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[i] = <span class="keyword">this</span>-&gt;staffArr[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移动之后数组长度-1</span></span><br><span class="line"><span class="keyword">this</span>-&gt;managerSize--;</span><br><span class="line"><span class="comment">//保存到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line"><span class="comment">//显示删除信息</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键退出和清屏</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改员工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::Mod_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileisEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入修改职工的编号&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="type">int</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">isEmpty</span>(id);</span><br><span class="line"><span class="comment">//如果查到了该id的员工，先删除这个员工的信息，再进行全部修改</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">//删除这个元素的所有信息，在这个元素的位置上更换成新的信息</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;staffArr[ret];</span><br><span class="line"><span class="type">int</span> newid;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> newdept;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入新职工编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newid;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入新的姓名:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择职位&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.老板&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.程序员&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; newdept;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类指针指向空</span></span><br><span class="line">Staff* staff = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">switch</span> (newdept) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//当选择1的时候，父类指针指向第一个子类对象Boss，实现多态的特性</span></span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">Boss</span>(newid, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">Manager</span>(newid, name, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">staff = <span class="keyword">new</span> <span class="built_in">SimpleStaff</span>(newid, name, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将新数据赋值给数组中的空数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 这个staffArr[ret]的类型时Staff*型，staff的类型也是Staff*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[ret] = staff;</span><br><span class="line"><span class="comment">//提示信息</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//将数据保存到文件</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找员工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::search_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先检索文件中已有的信息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileisEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找职工的编号/姓名(1/2)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//通过id查找</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line"><span class="type">int</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">isEmpty</span>(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//展示获取信息</span></span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[ret]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过姓名查找没写完，查找失败时不会有提示信息</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">string name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找员工姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//通过姓名查找</span></span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr[i]-&gt;name == name) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[i]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序数据</span></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::sort_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileisEmpty) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择升序/降序排列&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.按照员工工号进行升序(选择排序)&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.按照员工工号进行降序(选择排序)&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.按照员工工号进行升序(冒泡排序)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> select;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//升序排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将最小值赋值给第一个</span></span><br><span class="line"><span class="type">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;managerSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从最小值后面一个开始依次比较，如果最小值比旁边的数大，则将旁边的数赋值给最小值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr[min]-&gt;id &gt; <span class="keyword">this</span>-&gt;staffArr[j]-&gt;id) &#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果这个数不是最小值</span></span><br><span class="line"><span class="keyword">if</span> (i != min) &#123;</span><br><span class="line"><span class="comment">//将该数与最小值交换位置，保证让最小值在第一个位置</span></span><br><span class="line">Staff* temp = <span class="keyword">this</span>-&gt;staffArr[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[i] = <span class="keyword">this</span>-&gt;staffArr[min];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[min] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(select==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将最大值设置为第一个数</span></span><br><span class="line"><span class="type">int</span> max = i;</span><br><span class="line"><span class="comment">//从第二个数开始依次检索</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;managerSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果这个最大数比后一个数小则将后一个数赋值给最大数</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr[max] &lt; <span class="keyword">this</span>-&gt;staffArr[j]) &#123;</span><br><span class="line">max = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果这个数不是最大数</span></span><br><span class="line"><span class="comment">//将两个数换位保证最大数在第一个</span></span><br><span class="line"><span class="keyword">if</span> (i != max) &#123;</span><br><span class="line">Staff* temp = <span class="keyword">this</span>-&gt;staffArr[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[i] = <span class="keyword">this</span>-&gt;staffArr[max];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[max] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;managerSize - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr[j]-&gt;id &gt; <span class="keyword">this</span>-&gt;staffArr[j + <span class="number">1</span>]-&gt;id) &#123;</span><br><span class="line">Staff* temp = <span class="keyword">this</span>-&gt;staffArr[j];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[j] = <span class="keyword">this</span>-&gt;staffArr[j+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将文件保存到数据中去</span></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;结果为&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">show_Emp</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaffManager::clean_File</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确认清空吗(1清空/2返回)？&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> select;</span><br><span class="line">cin &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//ios::trunc如果文件存在先删除再创建</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(FILENAME, ios::trunc)</span></span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果堆上数据staffArr不为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++) &#123;</span><br><span class="line"><span class="comment">//依次删除每个数组中的元素指针</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;staffArr[i];</span><br><span class="line"><span class="comment">//避免野指针都置为null</span></span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再删除这一整个在堆上的数组数据</span></span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;staffArr;</span><br><span class="line"><span class="comment">//避免野指针置为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//大小置为0</span></span><br><span class="line"><span class="keyword">this</span>-&gt;managerSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//文件置为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;FileisEmpty = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">StaffManager::~<span class="built_in">StaffManager</span>() &#123;</span><br><span class="line"><span class="comment">//手动释放堆山的数据</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//如果只是删除了数组，但是数组中的元素还有残留，需要通过循环依次删除数组中的每个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;staffArr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;staffArr;</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="职工大类和继承职工的小类"><a href="#职工大类和继承职工的小类" class="headerlink" title="职工大类和继承职工的小类"></a>职工大类和继承职工的小类</h4><p>staff.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Staff</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//两个抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">deptName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> dept;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通职工继承并重写方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleStaff</span> :<span class="keyword">public</span> Staff &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//三参构造方法</span></span><br><span class="line"><span class="built_in">SimpleStaff</span>(<span class="type">int</span> sId, string sName,<span class="type">int</span> sDept);</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">deptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//经理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> :<span class="keyword">public</span> Staff &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//三参构造方法</span></span><br><span class="line"><span class="built_in">Manager</span>(<span class="type">int</span> sId, string sName, <span class="type">int</span> sDept);</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">deptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> :<span class="keyword">public</span> Staff &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//三参构造方法</span></span><br><span class="line"><span class="built_in">Boss</span>(<span class="type">int</span> sId, string sName, <span class="type">int</span> sDept);</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">deptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="职工类的方法重写"><a href="#职工类的方法重写" class="headerlink" title="职工类的方法重写"></a>职工类的方法重写</h4><p>staff.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;staff.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//员工</span></span><br><span class="line">SimpleStaff::<span class="built_in">SimpleStaff</span>(<span class="type">int</span> sId, string sName, <span class="type">int</span> sDept) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;id = sId;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = sName;</span><br><span class="line"><span class="keyword">this</span>-&gt;dept = sDept;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SimpleStaff::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;员工编号：&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; \t员工姓名：&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">deptName</span>() &lt;&lt; <span class="string">&quot; \t职责：敲代码&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">SimpleStaff::deptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//经理</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(<span class="type">int</span> sId, string sName, <span class="type">int</span> sDept) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;id = sId;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = sName;</span><br><span class="line"><span class="keyword">this</span>-&gt;dept = sDept;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;员工编号：&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; \t员工姓名：&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">deptName</span>() &lt;&lt;<span class="string">&quot; \t职责：做项目&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Manager::deptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;经理&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老板</span></span><br><span class="line">Boss::<span class="built_in">Boss</span>(<span class="type">int</span> sId, string sName, <span class="type">int</span> sDept) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;id = sId;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = sName;</span><br><span class="line"><span class="keyword">this</span>-&gt;dept = sDept;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Boss::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;员工编号：&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; \t员工姓名：&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; \t岗位：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">deptName</span>()&lt;&lt; <span class="string">&quot; \t职责：赚大钱&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Boss::deptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;董事长&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;staffManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;staff.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">StaffManager sm;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">sm.<span class="built_in">showMenu</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入你的选择&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">switch</span>(num) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">//退出系统</span></span><br><span class="line">sm.<span class="built_in">exitSystem</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//添加职工</span></span><br><span class="line">sm.<span class="built_in">addStaff</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//显示职工</span></span><br><span class="line">sm.<span class="built_in">show_Emp</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="comment">//删除职工</span></span><br><span class="line">sm.<span class="built_in">delete_Emp</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="comment">//修改职工</span></span><br><span class="line">sm.<span class="built_in">Mod_Emp</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="comment">//查找职工</span></span><br><span class="line">sm.<span class="built_in">search_Emp</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">sm.<span class="built_in">sort_Emp</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">sm.<span class="built_in">clean_File</span>();</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h3><p>用到了选择算法，选择算法的原理是，开始时将第一个数设置为最小值，如果在后面的循环中，这个数比后一个数小，则将最小数变成后一个数，然后保证最小数在最左边，以此类推，可以参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;managerSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将最小值赋值给第一个</span></span><br><span class="line"><span class="type">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;managerSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从最小值后面一个开始依次比较，如果最小值比旁边的数大，则将旁边的数赋值给最小值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;staffArr[min]-&gt;id &gt; <span class="keyword">this</span>-&gt;staffArr[j]-&gt;id) &#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果这个数不是最小值</span></span><br><span class="line"><span class="keyword">if</span> (i != min) &#123;</span><br><span class="line"><span class="comment">//将该数与最小值交换位置，保证让最小值在第一个位置</span></span><br><span class="line">Staff* temp = <span class="keyword">this</span>-&gt;staffArr[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[i] = <span class="keyword">this</span>-&gt;staffArr[min];</span><br><span class="line"><span class="keyword">this</span>-&gt;staffArr[min] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这里面所有的this-&gt;都可以去掉，加上是为了防止有局部变量同名情况，但是本案例没有同名的现象，可以全部去掉，但是最好还是全部加上。初始化的函数没有弄懂，还是比较疑惑。存数组指针的方式比较新颖，但是利用多态的属性去解决，非常合适，非常巧妙。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中左移运算符和递增运算符的重载问题</title>
      <link href="/2022/05/14/C-%E4%B8%AD%E5%B7%A6%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%80%92%E5%A2%9E%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/14/C-%E4%B8%AD%E5%B7%A6%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%80%92%E5%A2%9E%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在学习左移运算符和递增运算符时遇到了一些小问题，&lt;&lt;运算符爆红</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInterger</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInterger m);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认无参构造</span></span><br><span class="line"><span class="built_in">MyInterger</span>() &#123;</span><br><span class="line">m_num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载前置++，返回引用是为了对一个数值进行操作</span></span><br><span class="line">MyInterger&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用前置++重载&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//先做一个++的运算</span></span><br><span class="line">m_num++;</span><br><span class="line"><span class="comment">//返回自身</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int作为占位参数，区分前置和后置，这里是后置</span></span><br><span class="line"><span class="comment">//为什么返回的不是引用...因为返回的值是个局部对象，在运行完之后就被释放了</span></span><br><span class="line"><span class="comment">//后置++记录的是常量（temp变量)的值，不是对象的值</span></span><br><span class="line">MyInterger <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用后置++重载&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//先记录当前结果</span></span><br><span class="line">MyInterger temp = *<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//再++</span></span><br><span class="line">++m_num;</span><br><span class="line"><span class="comment">//在返回记录的结果</span></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">MyInterger</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//利用成员函数重载递增运算符</span></span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="comment">//常量引用的问题</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInterger m) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用&lt;&lt;重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; m.m_num;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyInterger mi;</span><br><span class="line">cout &lt;&lt; ++mi &lt;&lt; endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; mi &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyInterger mi;</span><br><span class="line">cout &lt;&lt; mi++ &lt;&lt; endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; mi &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">test1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一段关于自增的一个类，需要实现的是前置和后置++的操作，这个对于前置++,返回的是本身，要用引用进行传递，重写的&lt;&lt;原先接收的是引用，可以用。而后置++,返回的是局部变量，局部变量在函数结束之后就已经没了，因此不能传递引用，应该传值，而两个都可以以值传递的形式作为重写&lt;&lt;的形参。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个简单的通讯录管理系统</title>
      <link href="/2022/05/12/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/05/12/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><h5 id="struct-h"><a href="#struct-h" class="headerlink" title="struct.h"></a>struct.h</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//人的元素的结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">string name;</span><br><span class="line">string gender;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string telephone;</span><br><span class="line">string address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通讯录结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Addressbook</span> &#123;</span><br><span class="line"><span class="comment">//人的数组</span></span><br><span class="line">Person p[MAX];</span><br><span class="line"><span class="comment">//通讯录中的数组元素的个数</span></span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">validAge</span><span class="params">(<span class="type">int</span> age)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">validTele</span><span class="params">(string name)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">validGender</span><span class="params">(string gender)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exist</span><span class="params">(Addressbook* abs, string name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Addressbook *abs)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Addressbook* abs)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Addressbook* abs)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(Addressbook* abs,string name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(Addressbook* abs,string name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">(Addressbook* abs)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="crud-cpp"><a href="#crud-cpp" class="headerlink" title="crud.cpp"></a>crud.cpp</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断输入电话号码是否合法</span></span><br><span class="line"><span class="function">string <span class="title">validTele</span><span class="params">(string telephone)</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置一个字符数组接收字符串中的每一个元素</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//长度为字符串的长度</span></span><br><span class="line"><span class="type">int</span> len = telephone.<span class="built_in">length</span>();</span><br><span class="line"><span class="comment">//电话号码要为11位</span></span><br><span class="line"><span class="keyword">if</span> (len != <span class="number">11</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入的长度不合法，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; telephone;</span><br><span class="line"><span class="comment">//重新调用函数，重新判断</span></span><br><span class="line"><span class="built_in">validTele</span>(telephone);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将字符串中的每个元素挨个放入字符数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">a[i] = telephone[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符元素的比较“&#x27;xxx&#x27;”</span></span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>] != <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;电话的第一位必须为1，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; telephone;</span><br><span class="line"><span class="built_in">validTele</span>(telephone);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将字符数组转化为字符串&amp;a[0]起始位置，&amp;a[len-1]结束长度位置</span></span><br><span class="line"><span class="comment">//不能是strlen(a),a的分配的长度是20，除了有效字符外其他的会变成不知名数字组成的不知名文字</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(&amp;a[<span class="number">0</span>], &amp;a[len<span class="number">-1</span>])</span></span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断年龄输入是否合法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">validAge</span><span class="params">(<span class="type">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">120</span> || age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入年龄不合法,请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; age;</span><br><span class="line"><span class="built_in">validAge</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断性别是否合法</span></span><br><span class="line"><span class="function">string <span class="title">validGender</span><span class="params">(string gender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (gender != <span class="string">&quot;男&quot;</span> &amp;&amp; gender != <span class="string">&quot;女&quot;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有不男不女的性别！请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; gender;</span><br><span class="line"><span class="built_in">validGender</span>(gender);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Addressbook *abs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (abs-&gt;size==MAX) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;成员已满，无法继续添加成员&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">string name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入添加人的姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="comment">//将姓名放入记录本中的人类数组中，这一轮该人添加完毕之后会将size++,以便于传入下一个人</span></span><br><span class="line">abs-&gt;p[abs-&gt;size].name = name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入性别&quot;</span> &lt;&lt; endl;</span><br><span class="line">string gender;</span><br><span class="line">cin &gt;&gt; gender;</span><br><span class="line">abs-&gt;p[abs-&gt;size].gender = <span class="built_in">validGender</span>(gender);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入年龄&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">cin &gt;&gt; age;</span><br><span class="line">abs-&gt;p[abs-&gt;size].age = <span class="built_in">validAge</span>(age);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入联系电话&quot;</span> &lt;&lt; endl;</span><br><span class="line">string telephone;</span><br><span class="line">cin &gt;&gt; telephone;</span><br><span class="line">abs-&gt;p[abs-&gt;size].telephone = <span class="built_in">validTele</span>(telephone);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入家庭住址&quot;</span> &lt;&lt; endl;</span><br><span class="line">string address;</span><br><span class="line">cin &gt;&gt; address;</span><br><span class="line">abs-&gt;p[abs-&gt;size].address = address;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;添加成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">abs-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Addressbook* abs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (abs-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;还没有任何信息哦,请先添加信息哦&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; abs-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; abs-&gt;p[i].name &lt;&lt; <span class="string">&quot; 性别：&quot;</span> &lt;&lt; abs-&gt;p[i].gender &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; abs-&gt;p[i].age &lt;&lt; <span class="string">&quot; 联系电话：&quot;</span> &lt;&lt; abs-&gt;p[i].telephone &lt;&lt; <span class="string">&quot; 家庭住址 &quot;</span> &lt;&lt; abs-&gt;p[i].address &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于删除人之前的检查，有这个人才能进行删除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exist</span><span class="params">(Addressbook* abs, string name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; abs-&gt;size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (abs-&gt;p[i].name == name) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Addressbook* abs)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要删除的联系人姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">string name;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="comment">//将存在的传入到ret中，如果存在返回下标，好进行数组的删除操作</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">exist</span>(abs, name);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = ret; j &lt; abs-&gt;size; j++)</span><br><span class="line">&#123;</span><br><span class="line">abs-&gt;p[j] = abs-&gt;p[j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">abs-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照姓名查找一个元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(Addressbook *abs, string name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; abs-&gt;size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (abs-&gt;p[i].name == name) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;此人信息是&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;名字是:&quot;</span> &lt;&lt; abs-&gt;p[i].name &lt;&lt; <span class="string">&quot; 性别是:&quot;</span> &lt;&lt; abs-&gt;p[i].gender &lt;&lt; <span class="string">&quot; 年龄是:&quot;</span> &lt;&lt; abs-&gt;p[i].age &lt;&lt; <span class="string">&quot; 联系电话是:&quot;</span> &lt;&lt; abs-&gt;p[i].telephone &lt;&lt; <span class="string">&quot; 家庭住址是:&quot;</span> &lt;&lt; abs-&gt;p[i].address &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照姓名改变一个人的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(Addressbook* abs, string name)</span> </span>&#123;</span><br><span class="line">string gender;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string telephone;</span><br><span class="line">string address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; abs-&gt;size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (abs-&gt;p[i].name == name) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请问你想修改什么信息呢？输入1修改性别，2修改年龄，3修改电话，4修改地址&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要修改的性别&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; gender;</span><br><span class="line">abs-&gt;p[i].gender = <span class="built_in">validGender</span>(gender);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要修改的年龄&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; age;</span><br><span class="line">abs-&gt;p[i].age = <span class="built_in">validAge</span>(age);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要修改的电话&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; telephone;</span><br><span class="line">abs-&gt;p[i].telephone = <span class="built_in">validTele</span>(telephone);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要修改的地址&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; address;</span><br><span class="line">abs-&gt;p[i].address = address;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;修改失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">(Addressbook* abs)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;确定要清空吗(1清空/2反悔）&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">cin &gt;&gt; ret;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line">abs-&gt;size = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;完全清空！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;差一点就没数据咯&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;struct.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">panel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化操作</span></span><br><span class="line">Addressbook abs;</span><br><span class="line">abs.size = <span class="number">0</span>;</span><br><span class="line">string name;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">panel</span>();</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">add</span>(&amp;abs);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(&amp;abs);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">del</span>(&amp;abs);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入查找姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="built_in">search</span>(&amp;abs, name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要修改的人的姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="built_in">change</span>(&amp;abs, name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">clean</span>(&amp;abs);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;真的要退出吗(1/2)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> num1;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拜拜&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入数字不合法，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">panel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------通讯录管理系统-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------1添加------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------2显示------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------3删除------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------4查找------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------5修改------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------6清空------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------7退出------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入1~7&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h4><p>刚开始傻着只用一个结构体，想不到可以进行结构体嵌套，然后完全不知道怎么把元素放入数组，因此遍历也想的很麻烦，后来知道了用这个方法，传地址值的方式，通过指针去访问，非常便捷。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炫耀一下</title>
      <link href="/2022/04/28/%E7%82%AB%E8%80%80%E4%B8%80%E4%B8%8B/"/>
      <url>/2022/04/28/%E7%82%AB%E8%80%80%E4%B8%80%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/04/28/tCFcbwXxMj6NU1p.jpg" alt="BBECA48CB3AF90FA7BF145532B3E3806.png"></p><p>我男朋友做的我男朋友做的我男朋友做的，周先生太棒啦~~~~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 恋爱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaOOP中的this关键字</title>
      <link href="/2022/04/27/JavaOOP%E4%B8%AD%E7%9A%84this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2022/04/27/JavaOOP%E4%B8%AD%E7%9A%84this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h4 id="this的作用"><a href="#this的作用" class="headerlink" title="this的作用"></a>this的作用</h4><p>在成员方法中区分同名的成员变量和局部变量</p><h4 id="this的解释"><a href="#this的解释" class="headerlink" title="this的解释"></a>this的解释</h4><blockquote><p>在一个Java类中，在任何不加static()的成员方法中，它的形参隐含了一个传参，这个传参表示当前对象，这个对象由this指向</p></blockquote><p>所以this是个引用，引用就要用this.去访问，指向当前对象</p><h5 id="当前对象"><a href="#当前对象" class="headerlink" title="当前对象"></a>当前对象</h5><p>调用当前成员方法的对象</p><h4 id="static用this"><a href="#static用this" class="headerlink" title="static用this"></a>static用this</h4><p>static方法不能直接访问成员变量和成员方法，所以用this时要先创建对象</p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        c.CarBrand(<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="string">&quot;Benz&quot;</span>;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CarBrand</span><span class="params">(String brand)</span>&#123;</span><br><span class="line">        <span class="comment">//被省略的话</span></span><br><span class="line">        <span class="comment">//this.brand = brand;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;名字是&quot;</span> + brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是toyota</p><p>用this去访问显示赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        c.CarBrand(<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="string">&quot;Benz&quot;</span>;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CarBrand</span><span class="params">(String brand)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字是&quot;</span> + <span class="built_in">this</span>.brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的是benz</p><h4 id="在构造器中"><a href="#在构造器中" class="headerlink" title="在构造器中"></a>在构造器中</h4><p>有参构造中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;mama&quot;</span>);</span><br><span class="line">        c.CarBrand(<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">        System.out.println(c.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;papa&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="string">&quot;Benz&quot;</span>;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CarBrand</span><span class="params">(String brand)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字是&quot;</span> + <span class="built_in">this</span>.brand);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示的是mama</p><p><code>this.a</code>指的是成员变量的a</p><p><code>this.a = a</code>指的是局部变量的a</p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> OOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感悟和随笔1</title>
      <link href="/2022/04/27/%E6%84%9F%E6%82%9F%E5%92%8C%E9%9A%8F%E7%AC%941/"/>
      <url>/2022/04/27/%E6%84%9F%E6%82%9F%E5%92%8C%E9%9A%8F%E7%AC%941/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;思考了很久，还是打算写一些有关于自己的成长。</p><p>&nbsp;&nbsp;不知道该怎么开头，也不知道怎么写，想到什么说什么吧。</p><p>&nbsp;&nbsp;不知是什么时候开始，“卷”这个字开始突袭我的生活，和“卷”随之对应的，就是“躺平”。可能是在前几年，大一大二的时候还没曾有过这些想法，或者是想法微乎其微，觉得，哎呀，每天上上课就好了。对自己的未来的生活没有有所规划，也不知道自己以后会去干什么，觉得入社会和考研之类的离我太远。每天的生活都是：吃饭，上课，追剧，睡觉。对于学习永远都是，哎呀，还早，再玩一下再学。</p><p>&nbsp;&nbsp;直到大二下学期的那几个星期，我也开始随着大部队，懵懵懂懂的去考研，每天在图书馆从早待到晚，我天真的认为，我在和周围人一样学习，但其实上是，在学的进去的那么短暂的几个小时，我确实学会了一些什么，但是大部分时间，我觉得我在做无用功，甚至经常因为看视频看着看着就睡了好几个小时。</p><p>&nbsp;&nbsp;随着大三的到来，班上越来越多的同学加入了图书馆大军，在我看来，随着时间的流逝，我也开始有了职业焦虑，开始担心一些事，或者说是，担心别人超过我。然而事实上这些担心完全是无厘头的，但是我还是有一些这样的想法。我对那些同龄人，或是在网上看到的大牛，参加各种各样的竞赛，拿奖拿到手软，或者是在我什么都不会的情况下，同龄人已经开始去大厂实习，编写脚本，编写软件。往近了看，周围的同学天天图书馆泡着，上课就在背单词，写数学，我感觉到了前所未有的烦躁和焦虑。说实话，我对这些人产生的更多的不是崇拜，不是羡慕，可以说是有点嫉妒，看着心里有点不舒服。</p><p>&nbsp;&nbsp;我不想告诉别人，我在学习，所以我总是表面上总是在玩游戏，在摆烂，在追剧，我也很喜欢别人和我摆烂的状态一样，天天无所事事。背地里我拼命的看课，赶进度，然而却没有学进去丝毫，我有一个奇怪的想法就是，看得多了，我就卷赢了，但是可惜的是，这种无效状态我并不能坚持几天。</p><p>&nbsp;&nbsp;我在摆烂的同时还希望别人摆烂，稍有不摆我就会有心里不舒服，然后晚上就会因为今天又什么都没干而感到烦躁，常常深夜emo。但是好在，我把情绪释放给了亲近的人，经过一些开导和一些天的思考，我也明白了一些道理，也成长了很多。</p><p>&nbsp;&nbsp;其实总的说来，生活是自己的，只有自己才能决定，自己的生活方式是怎样的，我对别人的那种卷的焦虑和嫉妒完全是不切实际的，从头到尾我都是在关注别人，没有去关注自身。别人学会了但是我没有学会，或者是当时没有反应过来，会的晚了，我都会心里很不舒服。但是现在看来，不管是学的早还是学的晚，不管是学的快还是学的慢，我都没必要去关注别人的进度，只要自己能懂，我觉得就很好了。</p><p>&nbsp;&nbsp;卷的目的是什么，我觉得卷在我的生活中是毫无目的的，是虚头八脑的东西。我从头到尾，到以后的生活，我都不会再和别人卷，不会因为别人看上去学的很辛苦很久而拼命的去比较，去学得更久。对比起这个，我更愿意是达到一个快乐学习快乐生活的程度。当我新学会了一些东西时，我就会有种发自内心的快乐，这也就达到了我快乐学习的目的（其实写博客在我看来也是一个非常愉悦的过程）。</p><p>&nbsp;&nbsp;我也不会再因为别人学的比我多比我好而嫉妒，这是完全没有必要的。承认别人的优秀其实一点也不难，别人的优秀的主要作用也是一个激励自己上进的表现。更重要的是，现在的我认为，学的效率才是最重要的，我也开始不和别人比，按照自己的进度来，让自己每天能多学会一些知识，让自己变得真正扎实起来。该玩玩，该学学，娱乐学习两不误的状态，才能真正做到有效率，做到劳逸结合。</p><p>&nbsp;&nbsp;以后无论是考研，还是就业，还是一个考验自身是否扎实的过程，生活最终还是自己的，选择权在于你自己，你想打鸡血，那就打鸡血，像我这种，我还是扎扎实实，普普通通一些，这才是我想的生活方式。我的生活，还是要快快乐乐的鸭~</p><p>&nbsp;&nbsp;或许，这就是成长吧。我感觉到了我自身的变化，我觉得很开心，很欣慰。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的秘密花园05</title>
      <link href="/2022/04/23/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD05/"/>
      <url>/2022/04/23/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD05/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="输错了，不要偷看哦" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="567fc4710e04c1d30f091fc36f0e7ca5e958a6f078cb3ba3ec0c1948b128a0ce">c0452fb1bd73a809f8206662c66d473b99f49f506c52a8634d7b1815c26d0655fce0888b9368fe1aaeccca5a151b9d54e73afb2795e6ac4e831bddf1bae815af522cdd75624e95f0447d25ed961a7dadcd93a86f7dcf042f611d2a76134ab2d1abe5eaa4ee55c46922492c94afa6237fcea66447de68c1d0ed040a3e8b511f879b1b69955ed67d416ced206aec65b0f874ef7a984b29da328986a471f89d17d1d6644a3cf3e3275f2f7c9d1e0168d5d3214bdbb8b705c20651d8e45785cca5ac732d23eebaeaa4357d983ea6128191892c5e559000df285713557635c44693d062c9ed1b081b9df890bd87d306a28091966c3ab440cb2347da2dcb8ba6fa778bf9aa397a94b73f80d3a0d16777740e223d8d66b476a2bfc5c21b1a71d886d539ff0f4f54b625380106a0d40931507bdd0666ee96400e1397ba027bfc8a75afb744eb122ad373fbad2e2b6efdaed8154c1557809c52de28f5ddae174a1c2bcce6f16863d8941f8cd9f9f3c4273b7d13cdfbdb7a98c67a6a8e4c4457caa34a6e2cbf743d12ddc4e0762cfe1645b0d3e9c23bfb9b3f0d246b1dba1f7686314480af52845ba5bfe4a51b874ed8fb6408b01d4c1bb66aa36a1ee69e541eb29cf57d6df2cf360892c375eec816819e1c4dfa4668eac45047f44de54d2b4029a001e03805cd632c3c21e09e5217dff2354d8c8c8bf4c6d7a004bcedd2f32439e6a3fef2a3219add2ac3cdf3b890a8fa16209e3a20a19ac068cf990cc4befc1bf004e8f23afec89ca33fb577cf01837fc29502f6be466ee359e139398d2b047aa1344baa59910f07b890050c39579c67a9b5012388b8e5726d8777d19ee59a91672f5cb3f3f1692e51d6a61853dbe5ee2a6df740f6e39b473d62e16a8b32dc193dd07a93cf97bf073bd3f07eb3ed11f3de77e8d50895c81ba171f36fb6228ab389816ccb62a4ce73c50d3dc8c8561298441079425c08e8648acf834c11aeddd1d0116a7c6178c672903863be474f6bde8a348cc4d8ad7eee8425167449145927b45be81632eddc025dffa01379e2536fe0f4d5eac3b469330ca46793552dfc869858efa7e3a3f87180ec0d82c586338f821917909cf1fd1b3d69d255022bf6669b1740fde5bc79b5ce12b2455c0165c73ce59c119e7c0783277a62e3691455563ea3dd36df6a6b3b1c6faa823a103aa8eca08f51cae6c9bb3101e9747aca42b1496c948092780cacaa1b4159dd59e0206cdea8745e7fd5606cdeb1901fdc067f8dce321ff8875aa2e9e727c6d3944ef20bb21edf22d6041f0aeee401f4ef5c443adbce87f504b3e337e32808fb3043f092f584e53f4dd8b861ab8ad913e52c27bad4b51bd9c44a24daff7cf093eecd24beb5134e7c32667b2c76f6d1ff1647f5428e06044a37dbcad6e91260de4c2cb19246cc8c3e866c735e102e9852ba18831114f81fe7dd755e739f859e2da1c4903217ac8726fdf742366b0c24b590a65f68c5054385562b6b2f2a59add978a36373015594100678b675e00c3e41bcc33acad466468d07b9bfbb57d29313b116664649c887bb20ecdcb8315a1b48fd918f821941b6c12e4124571c6211674d53e1b411648cdf6f2577df394b6372e34f880894d8155cd3c86d2d33b08411d0527bba44f378f867144fa10c6ea4cb407d03f6bcb7a8bb9f3c8b0cc9b0b43f039b64440a7051c6adfc2a16429c294a6ed196bba7f3e3ba4a68f187ccdbc82a05418999cfd859ad3f5ea619b5ccfd3225b149cd61a16222420d9d917f516d5dd003c3683e318c5b7e7bd20da896467590d41f6665b5b3468e7ca3e487c021dc8af9c2a322674e7e317d0f310f5a0578c5b6c337d01538367846a324e41bc5c10ebfc28a47b43f3ff9e95c7fda955763398ef1705fd4d02765059d276db2a1ced09d0857a6ddd8ed9a0e01cd030cfc9b5fb02a1ebb24a7b65dcc4d968f2da776fbefa2013683a8bd0a2ad5d022bbdfef4844e721fdea069e7def689f40e9d2e23acc497b2a93863d2332e10c1c800a977382256b739a14288d5ba8ddccd866088c58d4de567c95efa7e0f5dee27350e4f8eef326378cb885ffc282a3804064db70bb154bef342f1a6cc190085a2e3b1bd89f756aeea94e14eb664869592f2da547ba544fa87ab15db1f5f0606eb6c9be3bbb079ec7257fd4befd44c03a3769cb814e44aa9500f98f6b941354052fe8a8e24e81dab48b1e87c17c4df7ff2b3895d7dd3b29af773e3c669a14c0d12fdaf6ede8fe5b06370f5b413081e4486b2408c198ebfdebbe93409643778a397736dc4e29b2e72a8092fab0c06eeb8cd8679ed86e830aff022f5b382293d2decb05ac6703ef4687c9ea2929ea0c7c44d6591c2401fef007db4c2c149a792687ac36bf95a86878a1971d53562cb1a095643b92489c013facca7e9880b067294bdd9f005dcd08407289d40885d871d023a462d1e8e463f89365785656f18704e56c552a8065f93b09e6a1a7a313dd17eaae6b0b08202a7e439619255e177ac1a5a8f4f970d8dfcee33d5eb4c9229eb62c7f1491af32f20787c029bfc2a766bf69803cb655d90396df3993</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">我们在一起的那一天</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 恋爱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言的线性表理论</title>
      <link href="/2022/04/22/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2022/04/22/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><h4 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h4><h5 id="静态数组初始化"><a href="#静态数组初始化" class="headerlink" title="静态数组初始化"></a>静态数组初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data[Maxsize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SqList</span><br></pre></td></tr></table></figure><h5 id="动态数组初始化"><a href="#动态数组初始化" class="headerlink" title="动态数组初始化"></a>动态数组初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span>* data;</span><br><span class="line">    <span class="type">int</span> Maxsize,length;</span><br><span class="line">&#125;SeqList</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InitList(SqList &amp;L)&#123;</span><br><span class="line">L.length = <span class="number">0</span>;<span class="comment">//设置初始长度为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">InsertList</span><span class="params">(SqList &amp;L,i,e)</span>&#123;</span><br><span class="line">    <span class="comment">//i是插入位序，位序从1开始</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//队列已满</span></span><br><span class="line">    <span class="keyword">if</span>(L.length&gt;=Maxsize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        从最后一个元素开始检索</span></span><br><span class="line"><span class="comment">        插入元素后面的元素依次向后移动</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = L.length;j&gt;=i;j--)&#123;</span><br><span class="line">        L.data[j] = L.data[j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//位序i的元素数组下标i-1</span></span><br><span class="line">    L.data[i<span class="number">-1</span>] = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/Cmgal7QNTr5nVJ9.png" alt="image.png"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">DeleteList</span><span class="params">(Sqlist &amp;L,i,&amp;e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(L.length==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//数组为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    e = L.data[i<span class="number">-1</span>]</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将删除元素后面的元素向前移动</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i;j&lt;L.length;j++)&#123;</span><br><span class="line">        L.data[j<span class="number">-1</span>] = L.data[j]; </span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/QKmHYvcTLOyjI6a.png" alt="image.png"></p><h3 id="单链表（带头节点）"><a href="#单链表（带头节点）" class="headerlink" title="单链表（带头节点）"></a>单链表（带头节点）</h3><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    <span class="comment">//分配一个头指针</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//分配失败</span></span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/rY2QcahSyibvn54.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不带头节点</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    <span class="comment">//必须初始化，否则会有内存中遗留的脏数据</span></span><br><span class="line">L = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><h5 id="给定节点的后插操作"><a href="#给定节点的后插操作" class="headerlink" title="给定节点的后插操作"></a>给定节点的后插操作</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">BackInsert</span><span class="params">(LNode* p,<span class="type">int</span> e)</span>&#123;</span><br><span class="line">    <span class="comment">//如果该给定节点为空，则返回false</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//为新结点开辟空间</span></span><br><span class="line">    LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//如果新结点开辟失败</span></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/wfbyk9tZ1Di4V8h.png" alt="image.png"></p><h5 id="给定节点的前插操作"><a href="#给定节点的前插操作" class="headerlink" title="给定节点的前插操作"></a>给定节点的前插操作</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">PriorInsert</span><span class="params">(LNode* p,<span class="type">int</span> e)</span>&#123;</span><br><span class="line">    <span class="comment">//如果该给定节点为空，则返回false</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//为新结点开辟空间</span></span><br><span class="line">    LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//如果新结点开辟失败</span></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="comment">//将p的数据域复制给s</span></span><br><span class="line">    s-&gt;data = p-&gt;data;</span><br><span class="line">    <span class="comment">//将新结点信息放入p中</span></span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/2BKHwTfacn1V9NU.png" alt="image.png"></p><h5 id="按位序插入（带头结点）"><a href="#按位序插入（带头结点）" class="headerlink" title="按位序插入（带头结点）"></a>按位序插入（带头结点）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">InsertList</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span>&#123;</span><br><span class="line"><span class="comment">//i是位序，从1开始，下表为i-1,插入要找到第i-1个节点</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">    <span class="comment">//以下是GetElem</span></span><br><span class="line">    <span class="comment">//p从头节点开始依次往后扫描</span></span><br><span class="line">    LNode* p = L;</span><br><span class="line">    <span class="comment">//j为节点位序，头节点位序为0；</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;<span class="comment">//以上的目的是找到第i-1个节点</span></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">    <span class="comment">//以下是BackInsert</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="comment">//为新结点开辟空间</span></span><br><span class="line">    LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按位序插入（不带头结点"><a href="#按位序插入（不带头结点" class="headerlink" title="按位序插入（不带头结点)"></a>按位序插入（不带头结点)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">InsertList</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span>&#123;</span><br><span class="line"><span class="comment">//i是位序，从1开始，下表为i-1,插入要找到第i-1个节点</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = L;</span><br><span class="line">        L = s;</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">    <span class="comment">//以下是GetElem</span></span><br><span class="line">    <span class="comment">//p从头节点开始依次往后扫描</span></span><br><span class="line">    LNode* p = L;</span><br><span class="line">    <span class="comment">//j为节点位序，不带头节点没有第0个节点，从第一个结点开始 ；</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;<span class="comment">//以上的目的是找到第i-1个节点</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/R5V21IgwldqEQtO.png" alt="image.png"></p><h5 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h5><p>可以看作是在头节点之后进行后插操作，及用到的是<code>Bool BackInsert(LNode* p,int e)</code>这个函数。我想可以这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不一定是对的，为个人想法</span></span><br><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">     <span class="comment">//创建头节点</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//初始化空列表</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">    <span class="keyword">while</span>(e!=<span class="number">9999</span>)&#123;</span><br><span class="line">    BackInsert(L,e);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书上这样，其实实现一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    <span class="comment">//创建头节点</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//初始化空列表</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//为每一个新结点开辟空间</span></span><br><span class="line">    LNode* s;</span><br><span class="line">    <span class="comment">//新结点的数据域</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="comment">//输入9999表示结束</span></span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="头插法（不带头结点（我的看法））"><a href="#头插法（不带头结点（我的看法））" class="headerlink" title="头插法（不带头结点（我的看法））"></a>头插法（不带头结点（我的看法））</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="comment">//插入元素的值</span></span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">    <span class="keyword">while</span>(e!=<span class="number">9999</span>)&#123;</span><br><span class="line">        LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h5><p>可以通过一个while循环来实现，但是时间复杂度较高为O(n^2)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">    InsertList(L,length+<span class="number">1</span>,e);用length记录单链表长度</span><br><span class="line">    L.length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书上的实现时间复杂度为O(n)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_TailInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    <span class="comment">//创建头节点</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//初始化空列表</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//为每一个新结点开辟空间</span></span><br><span class="line">    LNode* s;</span><br><span class="line">    <span class="comment">//设置一个指向表尾的指针r，开始将r指向头节点</span></span><br><span class="line">    LNode* r = L;</span><br><span class="line">    <span class="comment">//新结点的数据域</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="comment">//输入9999表示结束</span></span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后一个节点指向null</span></span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="尾插法（不带头结点）"><a href="#尾插法（不带头结点）" class="headerlink" title="尾插法（不带头结点）"></a>尾插法（不带头结点）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">TailInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="comment">//设立一个尾指针指向L</span></span><br><span class="line">    LNode* r = L;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">    <span class="keyword">while</span>(e!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="comment">//不带头结点的要考虑第一个节点，像带头节点的第一个节点一样设置</span></span><br><span class="line">        LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//如果插入的是第一个节点，则头指针和尾指针都指向这个头节点</span></span><br><span class="line">        <span class="keyword">if</span>(r==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            r = s;</span><br><span class="line">            L = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不是第一个节点，则在第一个节点之后插入新元素</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            r-&gt;next = s;</span><br><span class="line">            <span class="comment">//将尾指针指向尾节点</span></span><br><span class="line">            r = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/25/Pqn4HMSXt16GFCg.png" alt="image.png"></p><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><h5 id="删除指定节点"><a href="#删除指定节点" class="headerlink" title="删除指定节点"></a>删除指定节点</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">DeleteList</span><span class="params">(LinkList &amp;L,&amp;e,i)</span>&#123;</span><br><span class="line">    <span class="comment">//删除第零个节点，删除失败</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* p;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    p = L;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找不到要删除的元素</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将p后面的节点用指针q指向</span></span><br><span class="line">    LNode* q = p-&gt;next;</span><br><span class="line">    <span class="comment">//把q的值带出来</span></span><br><span class="line">    e = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/mCyB4V7TbNsP5iQ.png" alt="image.png"></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LNode* <span class="title function_">LocateElem</span><span class="params">(LinkList L,e)</span>&#123;</span><br><span class="line">    <span class="comment">//p指向头节点的后继元素</span></span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="comment">//循环查找</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LNode* <span class="title function_">GetElem</span><span class="params">(LinkList L,i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//i=1返回头节点</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    LNode* p = L;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="struct-h"><a href="#struct-h" class="headerlink" title="struct.h"></a>struct.h</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;LNode,*Linklist;</span><br><span class="line"> </span><br><span class="line"><span class="function">Linklist&amp; <span class="title">Initlist</span><span class="params">(Linklist&amp; L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">headInsert</span><span class="params">(Linklist&amp; L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TailInsert</span><span class="params">(Linklist&amp; L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Linklist L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertLink</span><span class="params">(Linklist&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span></span>;</span><br><span class="line"><span class="function">LNode* <span class="title">getElem</span><span class="params">(Linklist L, <span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteList</span><span class="params">(Linklist&amp; L, <span class="type">int</span> i)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Linklist&amp; <span class="title">Initlist</span><span class="params">(Linklist&amp; L)</span> </span>&#123;</span><br><span class="line">L = <span class="keyword">new</span> LNode;</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">headInsert</span><span class="params">(Linklist&amp; L)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要插入的节点&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">9999</span>) &#123;</span><br><span class="line">LNode* pNew = <span class="keyword">new</span> LNode;</span><br><span class="line">pNew-&gt;data = num;</span><br><span class="line">pNew-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = pNew;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//逆置</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Reverse</span><span class="params">(Linklist&amp; L)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将p指向第一个元素</span></span><br><span class="line">LNode* p = L-&gt;next, * r;</span><br><span class="line"><span class="comment">//将头节点和第一个元素断开</span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//当p不为空时表示p还没有到最后一个元素下一个元素，可以循环</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//将r指针指向p的下一个元素，防止p和下一个节点断开了找不到</span></span><br><span class="line">r = p-&gt;next;</span><br><span class="line"><span class="comment">//这两个步骤是头插操作</span></span><br><span class="line">p-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = p;</span><br><span class="line"><span class="comment">//p后移开始执行下一个元素</span></span><br><span class="line">p = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TailInsert</span><span class="params">(Linklist&amp; L)</span> </span>&#123;</span><br><span class="line">LNode* pTail = L;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要插入的节点&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">9999</span>) &#123;</span><br><span class="line">LNode* pNew = <span class="keyword">new</span> LNode;</span><br><span class="line">pNew-&gt;data = num;</span><br><span class="line">pTail-&gt;next = pNew;</span><br><span class="line">pTail = pNew;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line">&#125;</span><br><span class="line">pTail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找指定节点前一个结点</span></span><br><span class="line"><span class="function">LNode* <span class="title">getElem</span><span class="params">(Linklist L, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">LNode* p = L;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span>&amp;&amp;j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按位插入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertLink</span><span class="params">(Linklist&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode* p = <span class="built_in">getElem</span>(L, i);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode* pNew = <span class="keyword">new</span> LNode;</span><br><span class="line">pNew-&gt;data = e;</span><br><span class="line">pNew-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = pNew;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteList</span><span class="params">(Linklist&amp; L, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode* p = <span class="built_in">getElem</span>(L, i);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode* q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Linklist L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有节点&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">LNode* p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Linklist L;</span><br><span class="line"><span class="built_in">Initlist</span>(L);</span><br><span class="line"><span class="built_in">headInsert</span>(L);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;头插的结果是&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(L);</span><br><span class="line"><span class="built_in">TailInsert</span>(L);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;尾插的结果是&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(L);</span><br><span class="line"><span class="built_in">InsertLink</span>(L, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;尾插结果按位插入的结果是&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(L);</span><br><span class="line"><span class="built_in">deleteList</span>(L, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除后的结果是&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><p><img src="https://s2.loli.net/2022/05/17/VHPd2hRqMgmKOeJ.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/05/20/KNMYUO19T8jstvh.png" alt="image.png"></p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>前面找元素的过程和单链表一毛一样，找到之后插入代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DNode* s = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line"><span class="comment">//如果插入到是最后一个节点，有可能出现空指针异常的错误</span></span><br><span class="line"><span class="keyword">if</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    p-&gt;next-&gt;pre = s;</span><br><span class="line">s-&gt;pre = p;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/u6ENHW1VJ73KfUG.png" alt="image.png"></p><h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><p>寻找元素和单链表一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e = q-&gt;data;</span><br><span class="line"><span class="comment">//q为待删除节点</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="comment">//q节点后面一个节点的前向指针</span></span><br><span class="line"><span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    q-&gt;next-&gt;pre = p;</span><br><span class="line"><span class="comment">//释放q</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/23/wchbjHaTuy9Ve1K.jpg" alt="11C16FE7C8FDA59EAAEEFFC39FD77A4C.png"></p><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><h4 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h4><p>和单链表比就是循环单链表尾节点应该指向该链表的头节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原先时</span></span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//现在时</span></span><br><span class="line">p-&gt;next = L;</span><br></pre></td></tr></table></figure><p>在初始化时</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原先时</span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//现在时</span></span><br><span class="line">L-&gt;next = L;</span><br></pre></td></tr></table></figure><h4 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h4><p>循环双链表的删除和插入就不用考虑最后一个节点的问题了,尾节点的next指针指向头节点，头节点的pre指针指向尾节点</p><h5 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DNode* s = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;pre = s;</span><br><span class="line">s-&gt;pre = p;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure><h5 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">e = q-&gt;data;</span><br><span class="line"><span class="comment">//q为待删除节点</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="comment">//q节点后面一个节点的前向指针</span></span><br><span class="line">q-&gt;next-&gt;pre = p;</span><br><span class="line"><span class="comment">//释放q</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h4><h5 id="表示-1"><a href="#表示-1" class="headerlink" title="表示"></a>表示</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="comment">//top指针指向栈顶元素</span></span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h5 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h5><p>将top指针设为-1即<code>s.top = -1</code></p><p><img src="https://s2.loli.net/2022/04/24/4C1fX8RSmQFl3bo.png" alt="image.png"></p><h5 id="判断栈空"><a href="#判断栈空" class="headerlink" title="判断栈空"></a>判断栈空</h5><p><code>s.top == -1</code></p><h5 id="进栈"><a href="#进栈" class="headerlink" title="进栈"></a>进栈</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">push</span><span class="params">(SqStack &amp;s,&amp;e)</span>&#123;</span><br><span class="line">    <span class="comment">//栈满时</span></span><br><span class="line">    <span class="keyword">if</span>(s.top == MAXSIZE<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//将头指针移到待添加元素</span></span><br><span class="line">    s.top++;</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    s.data[s.top] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/4BZmHA9fDayS2Oh.png" alt="image.png"></p><h5 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">pull</span><span class="params">(SqStack &amp;s,&amp;e)</span>&#123;</span><br><span class="line">    <span class="comment">//栈空时</span></span><br><span class="line">    <span class="keyword">if</span>(s.top == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//e出栈</span></span><br><span class="line">    e = s.data[s.top];</span><br><span class="line">    <span class="comment">//指针后移</span></span><br><span class="line">    s.top--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/yzu5cXLSW2QobMh.png" alt="image.png"></p><h4 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h4><h5 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">LiStack* <span class="title function_">Push</span><span class="params">(LiStack* <span class="built_in">stack</span>,<span class="type">int</span> e)</span>&#123;</span><br><span class="line">    <span class="comment">//初始化栈</span></span><br><span class="line">    InitStack(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="comment">//为新元素分配内存空间</span></span><br><span class="line">    LiStack* s = (LiStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LiStack));</span><br><span class="line">    <span class="comment">//分配内存失败</span></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//给新结点赋予数值</span></span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    <span class="comment">//下一个指针指向null</span></span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//移动栈顶指针</span></span><br><span class="line">    <span class="built_in">stack</span> = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">LiStack* <span class="title function_">Pop</span><span class="params">(LiStack* <span class="built_in">stack</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">stack</span>)&#123;</span><br><span class="line">        <span class="comment">//给顶部元素设置一个删除节点指针p，和此时的栈顶指针指向同一个节点</span></span><br><span class="line">        LiStack* p = <span class="built_in">stack</span>;</span><br><span class="line">        <span class="comment">//将栈顶指针移动到待删除节点后面一个元素</span></span><br><span class="line">        <span class="built_in">stack</span> = <span class="built_in">stack</span>-&gt;next;</span><br><span class="line">        <span class="comment">//输出待删除结点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;待删除元素：%d&quot;</span>,p-&gt;data);</span><br><span class="line">        <span class="comment">//如果待删除元素后一个元素不为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">stack</span>)&#123;</span><br><span class="line">            <span class="comment">//输出下一个待删除元素</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;下一个待删除的元素是：%d&quot;</span>,<span class="built_in">stack</span>-&gt;data);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//待删除节点后面一个为空</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有元素了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回收掉~</span></span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果一开始就没元素</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是空栈&quot;</span>);</span><br><span class="line">        <span class="comment">//返回空栈</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="struct-h-1"><a href="#struct-h-1" class="headerlink" title="struct.h"></a>struct.h</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span>* pNext;</span><br><span class="line">&#125;Stack_t,*pStack_t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Initlist</span><span class="params">(pStack_t&amp; top)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(pStack_t&amp; top)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(pStack_t&amp; top)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(pStack_t top)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Initlist</span><span class="params">(pStack_t&amp; top)</span> </span>&#123;</span><br><span class="line">top = <span class="keyword">new</span> Stack_t;</span><br><span class="line"><span class="keyword">if</span> (top == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;分配失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">top = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//压栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(pStack_t&amp; top)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入入栈元素,10停止入栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">10</span>) &#123;</span><br><span class="line">Stack_t* pNew = <span class="keyword">new</span> Stack_t;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&quot;入栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">pNew-&gt;data = num;</span><br><span class="line">pNew-&gt;pNext = top;</span><br><span class="line">top = pNew;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(pStack_t&amp; top)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (top == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;空栈&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">while</span> (top) &#123;</span><br><span class="line">Stack_t* pCur = top;</span><br><span class="line">num = top-&gt;data;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&quot;出栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">top = top-&gt;pNext;</span><br><span class="line"><span class="keyword">delete</span> pCur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(pStack_t top)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (top == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有元素&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Stack_t* p = top;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">pStack_t top;</span><br><span class="line"><span class="comment">//传入的是top指针的别名</span></span><br><span class="line"><span class="built_in">Initlist</span>(top);</span><br><span class="line"><span class="built_in">push</span>(top);</span><br><span class="line"><span class="built_in">pop</span>(top);</span><br><span class="line"><span class="built_in">print</span>(top);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/20/4B6VEsN2ALxqZeR.png" alt="image.png"></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="顺序队列-没有任何信号源切队尾指针指向下一个元素时"><a href="#顺序队列-没有任何信号源切队尾指针指向下一个元素时" class="headerlink" title="顺序队列(没有任何信号源切队尾指针指向下一个元素时)"></a>顺序队列(没有任何信号源切队尾指针指向下一个元素时)</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队列是头出jio进</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="comment">//存放队列元素</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="comment">//存放队头指针队尾指针</span></span><br><span class="line">    <span class="type">int</span> rear,front;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">    <span class="comment">//队头指针队尾指针都指向0</span></span><br><span class="line">    Q.front = <span class="number">0</span>;</span><br><span class="line">    Q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,e)</span>&#123;</span><br><span class="line">    <span class="comment">//队满时</span></span><br><span class="line">    <span class="keyword">if</span>(Q.front==(Q.rear+<span class="number">1</span>)%MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    Q.data[Q.rear] = e;</span><br><span class="line">    <span class="comment">//队尾元素后移</span></span><br><span class="line">    Q.rear = (Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">DeQueue</span><span class="params">(SqQueue &amp;L,&amp;e)</span>&#123;</span><br><span class="line">    <span class="comment">//空队</span></span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//待删除元素让e带出去</span></span><br><span class="line">    e = Q.data[Q.front];</span><br><span class="line">    <span class="comment">//队头元素后移</span></span><br><span class="line">    Q.front = (Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序队列有一个size记录队空或者队满时"><a href="#顺序队列有一个size记录队空或者队满时" class="headerlink" title="顺序队列有一个size记录队空或者队满时"></a>顺序队列有一个size记录队空或者队满时</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="comment">//存放队列元素</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="comment">//存放队头指针队尾指针</span></span><br><span class="line">    <span class="type">int</span> rear,front;</span><br><span class="line">    <span class="comment">//计数器</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-4"><a href="#初始化-4" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">    <span class="comment">//队头指针队尾指针都指向0</span></span><br><span class="line">    Q.front = <span class="number">0</span>;</span><br><span class="line">    Q.rear = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始大小为0</span></span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,e)</span>&#123;</span><br><span class="line">    <span class="comment">//队满时</span></span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear &amp;&amp; size==MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    Q.data[Q.rear] = e;</span><br><span class="line">    <span class="comment">//队尾元素后移</span></span><br><span class="line">    Q.rear = (Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">DeQueue</span><span class="params">(SqQueue &amp;L,&amp;e)</span>&#123;</span><br><span class="line">    <span class="comment">//空队</span></span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear &amp;&amp; size==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//待删除元素让e带出去</span></span><br><span class="line">    e = Q.data[Q.front];</span><br><span class="line">    <span class="comment">//队头元素后移</span></span><br><span class="line">    Q.front = (Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序队列有一个tag记录队空或者队满时"><a href="#顺序队列有一个tag记录队空或者队满时" class="headerlink" title="顺序队列有一个tag记录队空或者队满时"></a>顺序队列有一个tag记录队空或者队满时</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="comment">//存放队列元素</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="comment">//存放队头指针队尾指针</span></span><br><span class="line">    <span class="type">int</span> rear,front;</span><br><span class="line">    <span class="comment">//计数器</span></span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-5"><a href="#初始化-5" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">    <span class="comment">//队头指针队尾指针都指向0</span></span><br><span class="line">    Q.front = <span class="number">0</span>;</span><br><span class="line">    Q.rear = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//tag初始化为0</span></span><br><span class="line">    tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-2"><a href="#入队-2" class="headerlink" title="入队"></a>入队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,e)</span>&#123;</span><br><span class="line">    <span class="comment">//队满时</span></span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear &amp;&amp; tag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    Q.data[Q.rear] = e;</span><br><span class="line">    <span class="comment">//队尾元素后移</span></span><br><span class="line">    Q.rear = (Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    <span class="comment">//tag为1表示最后一次操作是插入</span></span><br><span class="line">    tag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="出队-2"><a href="#出队-2" class="headerlink" title="出队"></a>出队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">DeQueue</span><span class="params">(SqQueue &amp;L,&amp;e)</span>&#123;</span><br><span class="line">    <span class="comment">//空队</span></span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear &amp;&amp; tag==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//待删除元素让e带出去</span></span><br><span class="line">    e = Q.data[Q.front];</span><br><span class="line">    <span class="comment">//队头元素后移</span></span><br><span class="line">    Q.front = (Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    <span class="comment">//tag为0表示最后一次操作是删除</span></span><br><span class="line">    tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h4><h5 id="定义（带头节点）"><a href="#定义（带头节点）" class="headerlink" title="定义（带头节点）"></a>定义（带头节点）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链式队列节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-6"><a href="#初始化-6" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;</span><br><span class="line">    <span class="comment">//初始化头尾指针</span></span><br><span class="line">    LinkNode* front = rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    <span class="comment">//因为头尾指针指向同一个元素，因此可以</span></span><br><span class="line">    <span class="comment">//Q-&gt;rear-&gt;next = null;两个等价我认为</span></span><br><span class="line">    Q-&gt;front-&gt;next = null;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-3"><a href="#入队-3" class="headerlink" title="入队"></a>入队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType e)</span>&#123;</span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    LinkNode* s = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    <span class="comment">//插到队尾</span></span><br><span class="line">    s-&gt;next = null;</span><br><span class="line">    Q-&gt;rear-&gt;next = s;</span><br><span class="line">    Q-&gt;rear = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/28/X4TkyMLbBs73Cm2.jpg" alt="9656850D6E1A5793FC57283B64DEFC99.png"></p><h5 id="出队-3"><a href="#出队-3" class="headerlink" title="出队"></a>出队</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Bool <span class="title function_">DeQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear == Q-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode* p = Q-&gt;front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    Q-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p == Q-&gt;rear)</span><br><span class="line">        Q-&gt;rear = Q-&gt;front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/28/SZ3Y2KLHpynXbi6.jpg" alt="EBCCF149386DCFBA3705DD4BCFF63807.png"></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="struct-h-2"><a href="#struct-h-2" class="headerlink" title="struct.h"></a>struct.h</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span>* pNext;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">QueueLink</span> &#123;</span><br><span class="line">Queue* front;</span><br><span class="line">Queue* rear;</span><br><span class="line">&#125;Qlink;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Initlist</span><span class="params">(Qlink* L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insertlist</span><span class="params">(Qlink* L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Deletelist</span><span class="params">(Qlink* L)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="main-cpp-2"><a href="#main-cpp-2" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Initlist</span><span class="params">(Qlink* L)</span> </span>&#123;</span><br><span class="line">L-&gt;front = <span class="keyword">new</span> Queue;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;front == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;rear = L-&gt;front;</span><br><span class="line">L-&gt;front-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;rear-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insertlist</span><span class="params">(Qlink* L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;front-&gt;pNext == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入插入的第一个元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line">Queue* pNew = <span class="keyword">new</span> Queue;</span><br><span class="line">pNew-&gt;num = num;</span><br><span class="line">pNew-&gt;pNext = L-&gt;rear-&gt;pNext;</span><br><span class="line">L-&gt;front-&gt;pNext = pNew;</span><br><span class="line">L-&gt;rear-&gt;pNext = pNew;</span><br><span class="line">L-&gt;rear = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入后续待插入元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">10</span>) &#123;</span><br><span class="line">Queue* pNew = <span class="keyword">new</span> Queue;</span><br><span class="line">pNew-&gt;num = num;</span><br><span class="line">pNew-&gt;pNext = L-&gt;rear-&gt;pNext;</span><br><span class="line">L-&gt;rear-&gt;pNext = pNew;</span><br><span class="line">L-&gt;rear = pNew;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Deletelist</span><span class="params">(Qlink* L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;front == L-&gt;rear) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有元素&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (L-&gt;front-&gt;pNext != <span class="literal">NULL</span>) &#123;</span><br><span class="line">Queue* pCur = L-&gt;front-&gt;pNext;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line">e = pCur-&gt;num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除的元素是&quot;</span> &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">L-&gt;front-&gt;pNext = pCur-&gt;pNext;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;rear == pCur) &#123;</span><br><span class="line">L-&gt;rear = L-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> pCur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Qlink* L;</span><br><span class="line">L = <span class="keyword">new</span> Qlink;</span><br><span class="line"><span class="built_in">Initlist</span>(L);</span><br><span class="line"><span class="built_in">Insertlist</span>(L);</span><br><span class="line"><span class="built_in">Deletelist</span>(L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/20/sdROILcVUbZkJgh.png" alt="image.png"></p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="struct-h-3"><a href="#struct-h-3" class="headerlink" title="struct.h"></a>struct.h</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tree</span> &#123;</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>* pleft, *pright;</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTree&amp; L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">midOrder</span><span class="params">(BiTree&amp; L)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createBiTree</span><span class="params">(BiTree&amp; L)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="main-cpp-3"><a href="#main-cpp-3" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createBiTree</span><span class="params">(BiTree&amp; L)</span></span>&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">L = <span class="keyword">new</span> BiTNode;</span><br><span class="line">L-&gt;data = ch;</span><br><span class="line"><span class="built_in">createBiTree</span>(L-&gt;pleft);</span><br><span class="line"><span class="built_in">createBiTree</span>(L-&gt;pright);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BiTree&amp; L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">preOrder</span>(L-&gt;pleft);</span><br><span class="line">cout &lt;&lt; L-&gt;data;</span><br><span class="line"><span class="built_in">preOrder</span>(L-&gt;pright);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">midOrder</span><span class="params">(BiTree&amp; L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L != <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; L-&gt;data;</span><br><span class="line"><span class="built_in">midOrder</span>(L-&gt;pleft);</span><br><span class="line"><span class="built_in">midOrder</span>(L-&gt;pright);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BiTree&amp; L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">postOrder</span>(L-&gt;pleft);</span><br><span class="line"><span class="built_in">postOrder</span>(L-&gt;pright);</span><br><span class="line">cout &lt;&lt; L-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BiTree T;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;中序遍历输入&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">createBiTree</span>(T);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;先序遍历输出&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">preOrder</span>(T);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;中序遍历输出&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">midOrder</span>(T);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;后续遍历输出&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">postOrder</span>(T);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/20/gCbc8IQhoRYufrs.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的秘密花园04</title>
      <link href="/2022/04/18/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD04/"/>
      <url>/2022/04/18/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD04/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="输错了，不要偷看哦" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c44f22588a443b74644dc4f6ef24098de235b766dc41ea63656ceb96ebc53c50">c0452fb1bd73a809f8206662c66d473baf00b4fae5d60e173805426ff50fdb10e48cf6a724312c956eac5d962a83930fa1a0ac825f0df6f796f4dc96bdb89c6ffbfe24c90c1164f281d087e507fb6fc67533acb3deb8965fa5b3a0fb865a432e3fe2fb92cd32d4bd34d84454fddf3fe6badfe8ecf8c3878429e402a79bf7382bc3307124840f7e98fc67a2829031084d00323598e4eed725b9c9c725143656d8b45a9dd4195c90b3ddb548131871aca2a4715ecb7eaa755b218002a2269a97ea935fab54ded452fd5d340396d5a9797677bd92a0dd26a82b317a7701622612bd897f324c72764fd892b9a4891e0780dcf6f51a78357695deabd8299d185c4d4c93b0edbdca06bcc33684d3860a0ee84040c30f4ec6d7fa49e6b25ae04650601ed78a5c5d33204c99d0ab33b106db75f453066a3690a4a00e1a8f036f9ee946d210ac8da44f09359694101b984f6bf57fc9b52b447865c6e31be29950f5f4cf7a3a117938a32d2dbe48b261a42b0773163af40a3dffb9fa8c8171ad35a0b3e75c4ee5e6648fd0780737c1abe5c586dac13d6b621445317aec10e1e50703989095fbaefaa7aaa2e07215279d1b7376aa7350f24d2e33f0ec26b2ac659a510437a85cfcbaefb7315f4a635fd72f8996f851da0d6976fa7df5772c04715a5e0c0b1d561edd4b60ac7faa5cdc3049c3540d62649b6d58ee7df6ac03268260fc5045f12b55255a9efc7411a826243d004c49ec782b270199b716642aa69b56c908f5c4205668ff660f64341a269b8b19ce4b4da1e321589971e53e9e89588979c7856a9828b7598b802752c1c60565f10d63bf8acb37c7469557a4eb2182481c8c67a4cdb331e15046c4a7623b90e990cd11b62882f8800c1e9186c45d4b3380ad3b3d726a36f407784fe21312337a5fdd3afb0dc51a033e03dc4348675db53a76c536f7c87605e33d5d7dda06a78ed4f04dffce7e45aff6f0a3888436c2014fa4ba3ee3bd02e17e375a22a06155f9b0d8e9cf8f2a88e8d07c5c7b8e717172a2e92b8d35e2a754fda461de8b8ede7634c66b61f2bb3d7ac18d2f59bed4a77f41b71c3a30d2a6d2bed91b84dd2e08cf48985c79ac9851a21ea4f97c16c837d2c4ba13a1df0408dab426b5c834f5ca43730f88c2e0c1d16150d8ab257e1d62d6bceb8344fd83dbe922697e64d78a277bdbddb6c9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">我们在一起的那一天</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 恋爱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的秘密花园03</title>
      <link href="/2022/04/16/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD03/"/>
      <url>/2022/04/16/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD03/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="输错了，不要偷看哦" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="badb27c4b393c60f4731c894ad457f4c2ccc123b263eb7709db0f5876833fd5c">c0452fb1bd73a809f8206662c66d473b99f49f506c52a8634d7b1815c26d0655472cfc4cf6462ff6fa72167d1aec9292838304cbef7300b68e42c44a1b22abe08c8976e7af9c6f5829db2dd977eda15b2cb5c857fb8d13a5149d8585dd5e34a08cb5af71e54793f33cd796c1c68a7a1001d89240f16d9f9282cbb570c6238b01551df42327c7b0070ae3af585c58f2421e490a3d4b4c904aeed6f6f46137cd49ceb8631f750ac452bbc500131ab5ea7d08998fd2effec928bc955dd4ed4d07fca180d8fd3eea783e3ccd7145b51da905aab222bb04c0028531ff5b6145efd79a1ff6caa15fb8144883da82acf338d83b7da4bbc3c0d3f31fb4397a1ce986f7da50c579f02f966c9768b72a13bfb9471d3472d8e270a75701e09306ae7b661478df38badac16f5705b56b72a5751b9893b03aa720a47a77bc431c14dd49c608ceea1c7a2caba71e9cd246957b81a022fb25dc5d10b39f9cbfae464323bf06cb82a02a31bd228a0e5e8dffe6a4e2f7adb886748703b8126bd285bb3d2098ccc1833653672b47210c7f9a0dceb260fc5c8627fab8197da79ccbe67d51c2f0c89a6084af1bbe80ee78c6a3e511c1ed037bc3162274e0e689cd0ea309a7710c5503933fcbda2d5d97bdbd7058b1b0e82d8c9f0cc93bbce1a2978060ea036ebea82911f214571d980a959ee08e3e78c6c9db9c8b59785f12fc5d05869cd2ddc97e31af15dee33ec598e9ac51d9db9127c157dbcc0000b33a66a46c3f24cc3b35d4374e3ed71777754ce70b376f8e57b779d2af4ca4a76c7e9e665b58f7abec30af0a7e3379636567f7705acb34bd289184a130153aa30e0e905474dc0432a044ef4e26042798ee671e78320ef73975180817d71c39d5ac18ca2cb39ed30292dc8dcd4ac51dbe4b36f35d543b1f7874e98a37e2f4d93b041470b03369f74c8cae3b7f534338931e45a6347769ceaa0ac0e3c25cb6764ad18d6a4c2246d724c626302209e596e10a43d28b1da73bda4473f16c477d2c8b038be533c1bbe5b271aa61c32e12c2a57b2147bbbdcb158cc4b707ac1c8b880c126262e8c6f35c5a024d72569c0c947af177d922aac2c2a05b18897541db8e66cb1ff496c71a06162bce463fb67ec779a70c4c757b69f78f23ea97108f94fc3617092526b0728026b4c7ea08048863598dab1ff178a984c91173f1ea23b058d984e857afafba45c49dfedda2942fe8fc016e248d289d37e07e09033c1450ab7b929a81eb4629ecdee3868c72bb1e9a50f31d37a56963bbac0b1fac3f24f4a9b9062dd102123b8ba19f5c526872bed5b1ca538b000f7e7391837e3040634f4bed12998d46a0179bc02001f1f8d601ec1dbb39a1f8d11ebaddc17ed88871d8c5883a1b860428db7e9a7f57621e0c049041ffaea619f37e91c60d8a2cc75c01c170171001387b53fbad1a8575fa388f45098c57b402a3b1c94d0d6f1aaed6287b4c71bdac11e67d802d75d7376b7848810b5f20ce23aca8effc1ee777a10275261e85cad6560f3caaea846a3518ea7d5e97bacb2d0c419ecfa6e6cd4d26ef</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">我们在一起的那一天</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 恋爱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的简单小算法</title>
      <link href="/2022/04/16/Java%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/16/Java%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-求回文数"><a href="#1-求回文数" class="headerlink" title="1.求回文数"></a>1.求回文数</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is palindrome(回文数) integer.</p><p>An integer is a <strong>palindrome</strong> when it reads the same backward as forward.</p><ul><li>For example, <code>121</code> is a palindrome while <code>123</code> is not.</li></ul><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 121</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 121 reads as 121 from left to right and from right to left.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 10</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//将int类型转化为String字符串类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(x);</span><br><span class="line">        <span class="comment">//创建两个字符串数组，好将str这个字符串切割存放</span></span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[str.length()];</span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[str.length()];</span><br><span class="line">        <span class="comment">//将切割的字符串按顺序放入两个数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="comment">/**用subString方法进行切割</span></span><br><span class="line"><span class="comment">             * subString(i):从第i个位置到最后一个位置</span></span><br><span class="line"><span class="comment">             * subString(i,i+1):切割一个字符</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            arr[i] = str.substring(i,i+<span class="number">1</span>);</span><br><span class="line">            arr1[i] = str.substring(i,i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保留第一个字符数组，将第二个字符数组进行翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr1.length; j++) &#123;</span><br><span class="line">            <span class="comment">//创建一个中间变量进行数据交换</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;arr.length-<span class="number">1</span>-j)&#123;</span><br><span class="line">                temp = arr1[arr1.length-<span class="number">1</span>-j];</span><br><span class="line">                arr1[arr1.length-<span class="number">1</span>-j] = arr1[j];</span><br><span class="line">                arr1[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以下方法将字符串数组转化为字符串</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; arr.length; k++) &#123;</span><br><span class="line">            sb.append(arr[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; arr1.length; l++) &#123;</span><br><span class="line">            sb1.append(arr1[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> sb1.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串比较用compareTo()方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> s1.compareTo(s2);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，我发现其实这一段代码也没用什么算法，占用内存也大，执行的也慢，于是我找到了一个用迭代算法来解决这个问题。</p><h4 id="迭代算法"><a href="#迭代算法" class="headerlink" title="迭代算法"></a>迭代算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="comment">//当该数小于0时不可能为回文数，当该数是10的倍数并且不等于0时，也不可能是回文数</span></span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x%<span class="number">10</span>==<span class="number">0</span>&amp;&amp;x!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">com</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> begin,res;</span><br><span class="line">        <span class="keyword">while</span>(x/com&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">            com = com*<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            res = x%<span class="number">10</span>;</span><br><span class="line">            begin = x/com;</span><br><span class="line">            <span class="keyword">if</span>(begin != res)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = (x%com)/<span class="number">10</span>;</span><br><span class="line">            com = com/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个迭代的方法体我没看懂，之前代码负数的回文还是我想的太深了，所以用了之前那个代码。</p><h4 id="拓展和总结"><a href="#拓展和总结" class="headerlink" title="拓展和总结"></a>拓展和总结</h4><h5 id="数字转化为字符串"><a href="#数字转化为字符串" class="headerlink" title="数字转化为字符串"></a>数字转化为字符串</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过包装类转化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(num)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toString(num)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加空字符转化</span></span><br><span class="line">String str=num+<span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="字符串转化为数字"><a href="#字符串转化为数字" class="headerlink" title="字符串转化为数字"></a>字符串转化为数字</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用包装类转化</span></span><br><span class="line"><span class="type">int</span> num= Integer.parseInt(str);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.valueOf(str).intValue();</span><br></pre></td></tr></table></figure><h5 id="substring用法"><a href="#substring用法" class="headerlink" title="substring用法"></a>substring用法</h5><h6 id="用它的目的"><a href="#用它的目的" class="headerlink" title="用它的目的"></a>用它的目的</h6><p>截取字符串中的某个部分</p><h6 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数int为开始的索引，对应String数字中的开始位置，</span></span><br><span class="line"><span class="comment">//第二个参数是截止的索引位置，对应String中的结束位置</span></span><br><span class="line">str.substring(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span><br></pre></td></tr></table></figure><h5 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h5><p><del>还没搞清楚…</del></p><p>StringBuffer是一个字符串的缓冲区，该容器中可以装很多的字符串，并且可以对字符串进行各种操作。通过一些方法调用可以改变某些字符串的长度。</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">sb.insert(int start,String str)</td><td align="center">在指定位置插入字符/字符串</td></tr><tr><td align="center">sb.delete(int start, int end)</td><td align="center">移除某一段子字符串</td></tr><tr><td align="center">sb.replace(int start, int end,String str)</td><td align="center">使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr><tr><td align="center">stringbuffer.append(String str)</td><td align="center">添加某个字符串</td></tr></tbody></table><p>然后我发现了一个方法：</p><p>public StringBuffer reverse()： 将此字符序列用其反转形式取代。</p><p>更多方法参考<a href="https://www.runoob.com/java/java-stringbuffer.html">这里</a></p><h5 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h5><p>字符串要用compareTo()进行比较！！！！！在这上面吃了好多亏，花了好多时间</p><h3 id="2-在字符串中求两个数的和"><a href="#2-在字符串中求两个数的和" class="headerlink" title="2.在字符串中求两个数的和"></a>2.在字符串中求两个数的和</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p><p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p><p>You can return the answer in any order.</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,4], target = 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,3], target = 6</span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.algo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//引入一个空的字符串数组</span></span><br><span class="line">        String[] nums = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入一串整数：&quot;</span>);</span><br><span class="line">        <span class="comment">//将输入的数以空格的形式隔开，通过.split(&quot; &quot;)的方式</span></span><br><span class="line">        nums = sc1.nextLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">//这里没弄明白</span></span><br><span class="line">            num[i] = Integer.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        twoSum(num, sc2.nextInt());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    arr[<span class="number">0</span>] = j;</span><br><span class="line">                    arr[<span class="number">1</span>] = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输入一个不定长的数组的步骤"><a href="#输入一个不定长的数组的步骤" class="headerlink" title="输入一个不定长的数组的步骤"></a>输入一个不定长的数组的步骤</h4><p>(1) 创建一个空的字符串数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] nums = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>(2) 输入一个不定长的数(可以以不同的符号进行隔开，这里用的是空格)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = sc1.nextLine().split(<span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure><p>(3) 此时，输入的不定长数字就进入了名为nums的字符串数组中去，创建一个int类型的动态数组，其中数组的长度是字符串数组的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br></pre></td></tr></table></figure><p>(4)  通过for循环遍历，将字符串数组中的每一个字符放入int数组中去(记得要类型转换)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">//这里是将String转化成int类型</span></span><br><span class="line">     num[i] = Integer.valueOf(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&nbsp;&nbsp;此题本身的算法简单，主要是学习到了怎么输入一个不定长的数组，平时每次输入不定长的数组，总是会想要先输入个长度，然后再根据长度进行while循环来实现，当遇到不能输入长度时，问题就变得非常棘手。现在知道了可以通过一个辅助的数组———&gt;字符串数组，进行切割，再放入原本的数组中求解，很方便，也不用担心len的问题。如果一个数组实现不了，考虑用多个数组一起实现问题。</p><h3 id="3-算乘方"><a href="#3-算乘方" class="headerlink" title="3.算乘方"></a>3.算乘方</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>Implement [powx, n), which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>xn</code>).</p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 2.00000, n = 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 2.10000, n = 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 2.00000, n = -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>java版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//double num = x;</span></span><br><span class="line">        <span class="keyword">if</span>(n&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> pow(x,n);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>/pow(x,-n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> x,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> pow(x,n/<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> num*num;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x*num*num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c++版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span> || n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>&nbsp;&nbsp;没做出来这个题，这个题是递归？迭代？这是官方给出的答案，下面一个c++是评论大佬给的答案，Java pow部分的代码看不懂，debug对于出栈也不是很了解，特别是我打//的地方下面的代码，然后对递归和迭代有点发懵，明天来解决</p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 爪洼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的秘密花园02</title>
      <link href="/2022/04/12/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD02/"/>
      <url>/2022/04/12/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD02/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="输错了，不要偷看哦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e75b7f4c42f1f07c636c24cb941191fad7e306138a6451b684ef4c54f4c56d8c">c0452fb1bd73a809f8206662c66d473b99f49f506c52a8634d7b1815c26d0655092c293f83c1a73c20391b9e5c8e9b0cf691c069075f13e1eafe3250132bc2c44c7719ae4bbdb809f94d36188c212ebb43f4d1045f55c554bba1dc0e827e53c1a28d0f2b826a1149ff24eb55731cc3bbebdd88f0de13d31c8678fb6b01edf4fe497e48cdbfed101cc94d0d153a0daae2efc9e53e4b43605c3bc5d3a754e9de0e236f066c577269308daf319d3d4f3fa14aaf880d34b8717412d70f3df174de09e042c1eba6cb3abee3ea4ad888718c7d592d6d8b8d9d04e7f016895e695c324757df146f67de44253a959a0d314aad5ee3299cca6aa844096a9ab3c6ed6cb39661f1191ee33f2e5c8ccd4e238408f1d27784a44b7b8296f53e19b5135b814314b72e8e24d6d4d41a1df614a336d9c6b29b05e14f643f01266aa96b46c371cbe83038d186b8e90402108d4732b3eeaa549b84c97fa9fdb44582bb3fc1452127ab0670722f2a4e1da6602fd5cd291b600045779a7045b0397f841874dac56f7e55f68ef30093140ae70605672dabae4a7be6f14fc147ef94f9e0b98c94356b3789de70e0c4745f4c4045e4fbb1fd8a9fe71355b57795fd8692dfd0964caf3ec96a184514827fee072abd8ca4e341acd54610b39db2c4f82b411927e2ea78553211ea1d3a7f2577fede70a5fa9d641906a4bac9e083e76c33ee2a23ab77048034e2070343fa52f3bfa495eb82895519a8d4330a24b7f88f3c68b1f9b25b614318e285ac0b13025380a41805c60a235ae05487bc4f66bc9b34d187878e5d7e0315aaf62784fbc3cef8635b1108480e2c098aad7432c0a380edb393894de29a3ee6f23a5c0f6beed9f2be8e698e30056d18e6dd630ce477b913329d7226dcc284c58300e4eef2dcd092d01941bafab343f96a1bc0efc7b6f7b4cc53c7d55c959faf0a1463e315a71edcd766eb30a4f2a497e7fbc35ca653e31f5afcabd3fa91ff2c4747a88f24fe34168c799e2b92615be2084a3dde9a8dac5fdf900dcb7332d0b837709fc977d97970f9666e76d4d871204fd7e7946991ec7eb91ada20faa890cdbd30467934659e41946a64b40010a28eb2fa9e2ed9dc466a7fe0b501bab40eea3330b5581c0f8305d09f291a3b79c78b2b13ed99ab9dfecfc1be340faf5e885b0efbb1a923f9fb2c71e6467343eae2317addf0030ab9fb2e94f343d4369963f29ad6ded43274dac168732ed38cb8954be3bb4a22a5cceedc41edf308a68389a5a86c00ab018634f91d4b8a5353357d747c14170534dc863cca8b84f6aea1c7a417b033a4c8f9829758ca5a218106d9bb087ff589f7b8a87dea58751d00cf5571e822597344bc55fa95b77fb0edddf7756e7d431392ff5b46e3575d6601d36680001332de9cc30d22e457fc0e0e65f10f494e312809a2b96011a79c02282e33725f4ce8f9002302ea254aaf3af7ff81d4f1dc96a8d585e21aaaffdc9e4dbacba0a3a537dd58a813b0df6ec7a46ecb0c476d60dc55a51c087d9d8d7242b7a587c74918c89bd24ac14779eaf9a02386add6cb2d99acd483fed89603f8befa1ea4910579457f4cfc95684503019f05f0aa9b7eaa412d3047b2f652ce5dec1ffd4251fc063589c89f1f40b2495b944fa9e925671fc3aefbd5ff666018be74a9e34b86bbe2c60c4e12b9699ff297199c987d8123a8438f03464e016b729f18f637318c48a9e5e2e03a1944e3d1ba70c4ea0515c37096ff2820f7202b94f80123681cc4d4e282fb91668992afd734f8dc431b5226b5a0179f272c0b72bafd82a242bf410a28e452e382fc2e31aece1f7989b68cb231130fdb748895779f810c35de71c8590672c1a40a0ff2bdc7cd5fa992df2cbf266fb5f35269fe6742868b5c2144e49ef7f47612d80d8dafe08464d5fcd7917c88b96e8c76fee7ab7c9ccc10e3b8662b5ad9d09515a15c00d7baa4af36cc8c7375cf9fdc555dc58c729cabc71711ff9d44581b5d17855ce6e88d0e981206503b63e8b405bbba739c7a4a1a8ac2925409dca2de1cb0c802d66cb5826efa2726028358586040bd92c57dd927b464bfab6ee60e1753578d859a7518123e00febcb6d8c8fa34328a0a8091c44f6512637b76c220059a39848a90bb2793adc599f7551119a0a84eb5405566cad44a3c425cd88d8ede8733fffd31ae954d72e05771dea48d6d8a5c63ae0cf3f91c07452fa06ba2f9eb904152934c11ec72de49f432ede472b90a3bd7473cc3a8d8a2f7390b799e5216dba05ba01a65a9b9d75ba240438bdf5cea066a6577e0b36a33c4b17f76f1cacec1dc8d66adc8ae5bdb28841f1bfbe97872d9b0239506abbcc5c282c3866ae4c4b6f5f5ca895834dd7c5639024d3372514ceb48ac064659eb77f7bca4cd4e50d56e335a9234da61e1272e7f586a5253b61fd2994b599f2459c4cfe4d1ac6857a3399e54ba42196a01ad7fa9867defdacadd768e1b138ecb479409dfdc7ff549a79af27df2d67bd068a0d0a907b1d417655fa74b490f7ff546842542a9b25630c94749bd3551655a5d11101ff39fb576621f6f00043eda5e050039a17685fbba71d5a904b318c29b9a6899c9d517dfab6c793db5e57f8334d6380c67b4a479917b29aa7dceb346a7365d65aa91042937a49f5ada713e5059ca88204b0a445256e9f30d81e9a25b27007d2f11e16ae3fb6652e812914eb9d3f305c11f18aae8ddb63979d8fea43421e46ca4e9de816f2d4c78d448ad8fbc5369ed6b13a2cf98b1a267ca52d7691bd0cad10b318758591596fcc02105a941b3bd0ad223c1858954c8cf5e203974caca8066bd8174611bc6267632501efae4fb3082f4104d34b9c02161a202272eb05d6ed2b19de72607afc59726b422c1176705ed5f82021616bd5ee64fbb1eb0c216908ad3a2451807da23c7600613e723f73d446e5201e892432f1cdec85e3523ba6069bd724a21d8cb884e76c5de98f7bd7ff5d36fa658ad979dd5c10e8f612998604be42b40540b6f28a36addaba213f61afe3b2de3a2c924c8f3384a28eab2358fe046236e9c43ca047d1516d300e6bb3560b5890e57aa9ada595f2b64d111676b57d22b478c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">我们在一起的那一天</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 恋爱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的秘密花园01</title>
      <link href="/2022/04/11/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD01/"/>
      <url>/2022/04/11/%E6%88%91%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD01/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="输错了，不要偷看哦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="65d38f17ee37ec21e03fb1dd898ce055b5addb4067d2f4d635958840dec9bc36"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">我们在一起的那一天</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 恋爱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的方法调用</title>
      <link href="/2022/04/10/Java%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/"/>
      <url>/2022/04/10/Java%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;想要知道方法的调用，还得从Java的JVM内存开始说起</p><h3 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h3><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p>&nbsp;&nbsp;JVM内存结构大概如下图所示<img src="https://s2.loli.net/2022/04/10/SIHuMEsKtPRivwb.png" alt="image.png"></p><p>然后我发现，JVM内存结构和内存模型居然不是一个东西，那我们先来说说JVM内存结构中的JVM栈</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>&nbsp;&nbsp;类型信息：</p><ul><li>类的完整名称</li><li>类的直接父类的完整名称</li><li>类的直接实现接口的有序列表</li><li>类的修饰符</li></ul><p>类型的常量池</p><p>字段信息</p><ul><li>声明的顺序</li><li>修饰符</li><li>类型</li><li>名字</li></ul><p>方法信息</p><ul><li>声明的顺序</li><li>修饰符</li><li>返回值类型</li><li>名字</li><li>参数列表（有序保存）</li><li>异常表（方法抛出的异常）</li><li>方法字节码（native、abstract方法除外，）</li><li>操作数栈和局部变量表大小</li></ul><p>类变量(即static变量，对类加载器的引用，对Class类的引用，方法表</p><p>可以查看<a href="https://blog.csdn.net/dshf_1/article/details/87171171">这儿</a>了解更多信息，逐渐了解后会逐一补全</p><h4 id="JVM栈"><a href="#JVM栈" class="headerlink" title="JVM栈"></a>JVM栈</h4><p>&nbsp;&nbsp;每当存在一个方法调用，都会有一个存储着方法信息的内存区域被加载进JVM栈，这种特殊的内存区域成为“栈帧”。而栈帧进栈就是方法调用的过程，随着方法栈帧进栈，方法中的局部变量会随之初始化完毕从而能够使用。当方法执行完毕后方法的栈帧就要出栈被销毁，局部变量也会随之被销毁。</p><p>&nbsp;&nbsp;每个栈帧都是相互独立，互不干涉的。</p><p>&nbsp;&nbsp;处在栈顶部的栈帧称之为“当前栈帧”，表示正在执行的方法。未执行完毕的方法会被压入栈底。</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>&nbsp;主要是由C语言等其他语言编写的，和爪洼没多大关系</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>&nbsp;最大区域，是存放对象与实例。</p><h4 id="堆上对象和栈中对象"><a href="#堆上对象和栈中对象" class="headerlink" title="堆上对象和栈中对象"></a>堆上对象和栈中对象</h4><h5 id="栈中对象图"><a href="#栈中对象图" class="headerlink" title="栈中对象图"></a>栈中对象图</h5><p><img src="https://s2.loli.net/2022/04/10/vGxZsfj5gnT8mLP.png" alt="image.png"></p><p>代码语句int a = 0；</p><h5 id="堆中对象图"><a href="#堆中对象图" class="headerlink" title="堆中对象图"></a>堆中对象图</h5><p><img src="https://s2.loli.net/2022/04/10/AI9LJqyZODsYk4f.png" alt="image.png"></p><p>arr这个局部变量中存放了数组的内存地址(该地址是堆上数组对象的内存地址)</p><h5 id="引用数据类型和基本数据类型"><a href="#引用数据类型和基本数据类型" class="headerlink" title="引用数据类型和基本数据类型"></a>引用数据类型和基本数据类型</h5><p>引用数据类型可以用“==”连接，比较的是堆上对象的地址</p><p>这里问题来了，是不是不知道引用数据类型和基本数据类型</p><table><thead><tr><th align="center">引用数据类型</th><th align="center">基本数据类型</th></tr></thead><tbody><tr><td align="center">类,接口,数组</td><td align="center">布尔类型和数值类型</td></tr></tbody></table><h6 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h6><p>引用数据类型的本质是堆上的对象，但只能通过引用间接访问堆上的对象，不能直接访问堆上的对象，基本数据类型存在于栈中，可以直接进行访问。</p><p>打印基本数据类型输出的是值，而打印引用数据类型的引用一般输出对象的地址值</p><h5 id="堆上变量和栈中变量的区别"><a href="#堆上变量和栈中变量的区别" class="headerlink" title="堆上变量和栈中变量的区别"></a>堆上变量和栈中变量的区别</h5><h6 id="从存储类型来看"><a href="#从存储类型来看" class="headerlink" title="从存储类型来看"></a>从存储类型来看</h6><p>堆上存储的是引用数据类型的一部分———–&gt;对象</p><p>栈上存储的是局部变量，包括基本数据类型和引用数据类型的引用</p><h6 id="从默认值来看"><a href="#从默认值来看" class="headerlink" title="从默认值来看"></a>从默认值来看</h6><p>栈上的变量没有默认值，局部变量想要使用必须明确给出值，叫做初始化</p><p>堆上的对象中的元素有默认值</p><p>byte:0,short:0,int:0,long:0L,float:0.0F,double:0.0,char:\u0000(绝对空字符) ,boolean:false</p><p>引用数据类型:null</p><h6 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h6><ul><li><p>在Java中，任何引用数据类型给对象中元素赋值的过程，默认初始化是永远的第一步，是不可以被省略的</p></li><li><p>char类型的数组直接输出数组名会得到其中字符元素组成的字符串</p></li><li><p>多个引用指向同一对象相当于对象有了很多个名字，他们操作的是同一对象</p></li><li><p>有null数组有产生空指针异常的几率</p></li></ul><p>———未完待续</p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> OOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的基本认识</title>
      <link href="/2022/04/08/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86/"/>
      <url>/2022/04/08/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>&nbsp;&nbsp;在搭建博客时，我使用的是通过hexo和github page共同协作搭建的，在这中间我频繁的使用到了git，从一开始克隆项目到本地，到后来的上传到我的GitHub的仓库中，我也遇到了一些bug，也大多跟git有关，所以去查看了一些关于认识git的讲解和视频。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h4><p>&nbsp;&nbsp;当你做一个文档的时候，第一次所做的是你初稿，当你想要在这个基础上进行添加和修改时，你会将初稿复制一份，在初稿的基础上进行添加和修改…以此类推，当你到最后一稿时，你前面会有n个历史修改的初稿，都存在了你的本地，这样的方式，虽然也很方便，但是非常占用内存，当你想要某个以前版本有但是后来又因为各种原因被你在后续版本删除的板块，就会非常头疼并且非常麻烦。但是git就能帮你。</p><p>&nbsp;&nbsp;git是一个分布式的版本控制软件，是由linux创建的，刚开始为了作用在Linux上的软件。它更像是一个文件系统，git能帮你自动实现版本管理，存取你所有的本地开发的历史版本，从第一版到最后一版，无论是想退回到哪个版本，git会迅速响应，这样也不会占用本地内存，文件有次序，非常的简洁，方便。</p><h4 id="git的初次使用"><a href="#git的初次使用" class="headerlink" title="git的初次使用"></a>git的初次使用</h4><p>&nbsp;&nbsp;你可以在<a href="https://git-scm.com/">官网</a>下载git工具，通过安装来使用，git的默认分支是master分支，通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>进行初始化，这样你就会获得一个<img src="https://s2.loli.net/2022/04/08/KoWwqD7LfZVuy2p.png" alt="image.png">的包，这个包里存放的就是所有文件的版本管理信息，这个包相当于是git的仓库，在这个git仓库中使用git命令，就可以对仓库中的文件进行版本管理。</p><h5 id="git的存档"><a href="#git的存档" class="headerlink" title="git的存档"></a>git的存档</h5><p>&nbsp;&nbsp;当你新建立了一个文件，当你存档时，你需要告诉git哪些文件你想要存档，通过一些git命令。git中有个暂存区，执行添加的命令，把这些文档先存入暂存区。仓库后台有管理员，git的各个分支就是git的仓库管理员，由管理员将缓存区的文档记录到存档中。当不断修改，存储之后，所有的历史都被存储在这个存档记录条上，并且文档显示的是最新的一篇文档的内容。git可以在所有的存档文件中进行切换，只需要进行相关的git操作。</p><h5 id="git的分支"><a href="#git的分支" class="headerlink" title="git的分支"></a>git的分支</h5><p>&nbsp;&nbsp;git下载之后的有一个默认分支是master分支，如果你在master分支上执行任何操作，那么你的所有的文件管理都是由master帮你管理的，当然，你也可以创建别的分支，在这之前需要做切换分支的命令，并且一次只能在一个分支上进行操作。但是在新分支中，可以对文件进行读档存档，在各个分支中也可以相互切换，切换之后的信息是该分支记录条下的最终信息。分支和分支是完全独立的。</p><h6 id="列出已存在分支"><a href="#列出已存在分支" class="headerlink" title="列出已存在分支"></a>列出已存在分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h6 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch newbranch          //newbranch可以换成你想创建的分支</span><br></pre></td></tr></table></figure><h6 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout newbranch</span><br></pre></td></tr></table></figure><h6 id="提交本地分支"><a href="#提交本地分支" class="headerlink" title="提交本地分支"></a>提交本地分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin newbranch</span><br></pre></td></tr></table></figure><h6 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h6><p>删除本地分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d newbranch    // 删除本地newbranch分支，但是还能保留上传的newbranch分支</span><br></pre></td></tr></table></figure><p>完全删除分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D newbranch    　// newbranch分支还没合并入当前分支，所以要用-D参数才能删除掉</span><br></pre></td></tr></table></figure><h5 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h5><p>&nbsp;&nbsp;分支是可以进行合并的，并且合并的分支是你所想被合并分支中的最后一个记录复制并合并到你想合并的分支中去，原先的分支依旧存在，不会被删除。</p><h6 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//首先切换分支到想合并的分支上</span><br><span class="line">$ git checkout master</span><br><span class="line">//将develop分支上的最终版本合并到master分支上</span><br><span class="line">$ git merge develop</span><br></pre></td></tr></table></figure><h4 id="GitHub是什么"><a href="#GitHub是什么" class="headerlink" title="GitHub是什么"></a>GitHub是什么</h4><p>&nbsp;&nbsp;基于git的版本控制的全球最大的免费的代码托管平台</p><h5 id="clone别人的项目"><a href="#clone别人的项目" class="headerlink" title="clone别人的项目"></a>clone别人的项目</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//将https://github.com/LL-Oridy/LL-Oridy.github.io.git项目clone到本地并命名为lloridy</span><br><span class="line">$ git clone https://github.com/LL-Oridy/LL-Oridy.github.io.git lloridy</span><br></pre></td></tr></table></figure><h5 id="git和GitHub建立连接"><a href="#git和GitHub建立连接" class="headerlink" title="git和GitHub建立连接"></a>git和GitHub建立连接</h5><ul><li><p>在github上创建自己的仓库</p></li><li><p>在自己的文件夹进行git bash here</p></li><li><p>输入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//git config --global表示你这台机器上所有的Git仓库都会使用这个配置</span><br><span class="line">$ git config --global user.name &quot;XXXX&quot;  ---- 填写的github仓库的名称</span><br><span class="line">$ git config --global user.email &quot;xxxx@xxx.com&quot;  ----可以填写github仓库的邮箱</span><br></pre></td></tr></table></figure><ul><li>本地仓库和github仓库之间的传输时通过SSH传输的，因此要创建SSH Key</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa  //--创建秘钥</span><br><span class="line">//用户主目录下，查看.ssh目录，找到id_rsa(私钥)和id_rsa.pub(公钥)这两个文件，</span><br></pre></td></tr></table></figure><ul><li><p>复制id_rsa.pub(公钥)的内容到GitHub<img src="https://s2.loli.net/2022/04/08/UczA2ShWKsvTHZC.png" alt="image.png"></p></li><li><p>进行如下操作将github仓库拉入本地</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//git初始化，会出现.git即git仓库</span><br><span class="line">$ git init</span><br><span class="line">//复制仓库地址</span><br><span class="line">$ git remote add origin 仓库地址(ssh链接)</span><br><span class="line">//将其拉入到本地</span><br><span class="line">$ git pull origin main </span><br><span class="line">//由于GitHub默认分支由master改成了main，在这之前要执行</span><br></pre></td></tr></table></figure><ul><li>本地推送到远程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//推送想推送的文件</span><br><span class="line">$ git add 文件名</span><br><span class="line">//推送全部文件</span><br><span class="line">$ git add .</span><br><span class="line">//输入描述</span><br><span class="line">$ git commit -m &#x27;描述&#x27;</span><br><span class="line">//此时文件已经推送到控制台，还要推送到仓库中</span><br><span class="line">$ git push origin main</span><br><span class="line">//最后按照提示输入用户名和密码</span><br></pre></td></tr></table></figure><h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><p><a href="https://git-scm.com/docs">git官方文档</a></p><p><a href="https://www.youtube.com/watch?v=88iPjxeaXpg">git和github的讲解视频</a></p><p>以及各种教程博客</p><p>————————未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的有参和无参构造</title>
      <link href="/2022/04/05/Java%E4%B8%AD%E7%9A%84%E6%9C%89%E5%8F%82%E5%92%8C%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0/"/>
      <url>/2022/04/05/Java%E4%B8%AD%E7%9A%84%E6%9C%89%E5%8F%82%E5%92%8C%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="有参构造的语法"><a href="#有参构造的语法" class="headerlink" title="有参构造的语法"></a>有参构造的语法</h4><p>如Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;String name,<span class="type">int</span> age,<span class="type">int</span> stuId&#125;&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.stuId = stuId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无参构造的语法"><a href="#无参构造的语法" class="headerlink" title="无参构造的语法"></a>无参构造的语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>当一个类中没有明确说明时，Java会提供一个默认的无参构造器。但是<em><strong>这个无参构造只能创建对象，不能直接进行赋值</strong></em></p><p>比如在只有默认无参构造器下是不可以这样直接对成员变量进行赋值的</p><p><img src="https://s2.loli.net/2022/04/05/7D4SbUAuiRTPIaz.png" alt="image.png"></p><p>只能通过以下进行赋值</p><p><img src="https://s2.loli.net/2022/04/05/T7SqtQ3pNoHVEsa.png" alt="image.png"></p><p>而经过有参构造之后</p><p><img src="https://s2.loli.net/2022/04/05/492fCoFkdPaiEnq.png" alt="image.png"></p><p>运行结果</p><p><img src="https://s2.loli.net/2022/04/05/sIyJd5hbqWcumRk.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> OOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaOOP练习</title>
      <link href="/2022/04/04/JavaOOP%E7%BB%83%E4%B9%A0/"/>
      <url>/2022/04/04/JavaOOP%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*将上一题的Student类，复制一份，增添一个属性：double score用来表示该学生的Java成绩</span></span><br><span class="line"><span class="comment">* 然后：</span></span><br><span class="line"><span class="comment">*    （1）修改print()方法，输出学生对象的name，stuId，gender，age，score的值(即输出学生信息)</span></span><br><span class="line"><span class="comment">*    （2）增加一个构造方法，能够给学生对象全体成员变量赋值，要求使用this简化代码</span></span><br><span class="line"><span class="comment">*    （2）创建五个该类的对象存入数组，先遍历输出每个学生的信息，再计算他们的平均Java成绩（尽量提取方法）</span></span><br><span class="line"><span class="comment">*         提示：数组既可以存储基本数据类型的值，也可以存储引用数据类型的值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="我写的"><a href="#我写的" class="headerlink" title="我写的"></a>我写的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//先创建一个数组</span></span><br><span class="line">        Student[] s = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            s[i] = <span class="keyword">new</span> <span class="title class_">Student</span>();<span class="comment">//每一个元素都是new的新对象</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个学生的姓名&quot;</span>);</span><br><span class="line">            s[i].name = sc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入该生的年龄&quot;</span>);</span><br><span class="line">            s[i].age = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入该生的性别&quot;</span>);</span><br><span class="line">            s[i].gender = sc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入该生的学号&quot;</span>);</span><br><span class="line">            s[i].stuId = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入该生的成绩&quot;</span>);</span><br><span class="line">            s[i].score = sc.nextDouble();</span><br><span class="line">            sum += s[i].score;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;均分是&quot;</span>+sum / s.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s.length; j++) &#123;</span><br><span class="line">            s[j].print();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="type">int</span> stuId;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender, <span class="type">int</span> stuId)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.stuId = stuId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//简化的this</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender, <span class="type">int</span> stuId, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name,age,gender,stuId);</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+gender+<span class="string">&quot;,年龄&quot;</span>+age+<span class="string">&quot;,学号是&quot;</span>+stuId+<span class="string">&quot;,成绩是&quot;</span>+score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="老师给的代码"><a href="#老师给的代码" class="headerlink" title="老师给的代码"></a>老师给的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JavaStudent</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaStudent</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>, <span class="number">90</span>);</span><br><span class="line">        <span class="type">JavaStudent</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaStudent</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">27</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">JavaStudent</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaStudent</span>(<span class="number">3</span>, <span class="string">&quot;王二&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">48</span>, <span class="number">48</span>);</span><br><span class="line">        <span class="type">JavaStudent</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaStudent</span>(<span class="number">4</span>, <span class="string">&quot;麻子&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">30</span>, <span class="number">60</span>);</span><br><span class="line">        <span class="type">JavaStudent</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaStudent</span>(<span class="number">5</span>, <span class="string">&quot;蔡徐坤&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>, <span class="number">86</span>);</span><br><span class="line">        <span class="comment">//动态初始化创建一个JavaStudent对象数组</span></span><br><span class="line">        JavaStudent[] js = <span class="keyword">new</span> <span class="title class_">JavaStudent</span>[<span class="number">5</span>];</span><br><span class="line">        js[<span class="number">0</span>] = s1;</span><br><span class="line">        js[<span class="number">1</span>] = s2;</span><br><span class="line">        js[<span class="number">2</span>] = s3;</span><br><span class="line">        js[<span class="number">3</span>] = s4;</span><br><span class="line">        js[<span class="number">4</span>] = s5;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个学生信息为:&quot;</span>);</span><br><span class="line">            js[i].print();</span><br><span class="line">            sum += (js[i].java);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;平均成绩是:&quot;</span> + (sum / <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (JavaStudent j : js) &#123;</span><br><span class="line">            j.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaStudent</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> java;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaStudent</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaStudent</span><span class="params">(<span class="type">int</span> id, String name, String gender, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaStudent</span><span class="params">(<span class="type">int</span> id, String name, String gender, <span class="type">int</span> age, <span class="type">double</span> java)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(id, name, gender, age);</span><br><span class="line">        <span class="built_in">this</span>.java = java;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;该学生姓名为:&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;学号为&quot;</span> + id + <span class="string">&quot;性别为&quot;</span> + gender + <span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;java成绩为&quot;</span> + java);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>老师是静态数组，我是动态数组</p><p>无无无无无无无有待补充</p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> OOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java小练习之跳舞打分</title>
      <link href="/2022/04/02/Java%E5%B0%8F%E7%BB%83%E4%B9%A0%E4%B9%8B%E8%B7%B3%E8%88%9E%E6%89%93%E5%88%86/"/>
      <url>/2022/04/02/Java%E5%B0%8F%E7%BB%83%E4%B9%A0%E4%B9%8B%E8%B7%B3%E8%88%9E%E6%89%93%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>&nbsp;&nbsp;现在你去参加快乐男声比赛，有10个评委打分，规则是去掉最高分和最低分，求平均分是最终成绩。请编码计算出你的最终成绩~</p><h4 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 现在你去参加快乐男声比赛，有10个评委打分，规则是去掉最高分和最低分，求平均分是最终成绩。请编码计算出你的最终成绩~</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        Double[] arr = <span class="keyword">new</span> <span class="title class_">Double</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;输入十个分数&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">            arr[i] = score;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Maxscore(arr));</span><br><span class="line">        System.out.println(Minscore(arr));</span><br><span class="line">        Avescore(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">Maxscore</span><span class="params">(Double[] arr)</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">Minscore</span><span class="params">(Double[] arr)</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;min)&#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Avescore</span><span class="params">(Double[] arr)</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">ave</span> <span class="operator">=</span> (sum-Maxscore(arr)-Minscore(arr))/<span class="number">8</span>;</span><br><span class="line">        System.out.println(ave);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://s2.loli.net/2022/04/02/vGW4IEPkSQgUTsJ.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> 方法调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java最大公约数和最小公倍数问题</title>
      <link href="/2022/01/11/Java%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2022/01/11/Java%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>最大公约数是num1/i=0且num2=0/i中的最大数，最小公倍数是i/num1=0且i/num2=0的最小数</p><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> daiying</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入两个正整数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        最大公约数思路：</span></span><br><span class="line"><span class="comment">        解释：两个数都能除尽的最大整数</span></span><br><span class="line"><span class="comment">        最大公约数最大不超过两个整数中的最小值</span></span><br><span class="line"><span class="comment">        为了体现最大，可以从最大的一个数开始筛选，选到最大的数break掉</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minNum</span> <span class="operator">=</span> (m&lt;n)?m:n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=minNum;i&gt;=<span class="number">1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%i==<span class="number">0</span> &amp;&amp; n%i==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最大公约数是&quot;</span>+i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        最小公倍数思路：</span></span><br><span class="line"><span class="comment">        解释：都能除尽两个数的最小整数</span></span><br><span class="line"><span class="comment">        最小公倍数最小为两个整数中的最大值，最大为两个整数相乘</span></span><br><span class="line"><span class="comment">        为了体现最大，可以从最小的一个数开始筛选，选到最小的数break掉</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> (m&gt;n)?m:n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=maxNum;i&lt;=m*n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%m==<span class="number">0</span> &amp;&amp; i%n==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最小公倍数是&quot;</span>+i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 三目运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> 三目运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java位运算符之进制转换</title>
      <link href="/2022/01/11/Java%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/01/11/Java%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><p>&nbsp;&nbsp;将十进制数60转化成为十六进制数</p><h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.daiying.javase.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> daiying</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//十进制数为60</span></span><br><span class="line">        <span class="type">int</span> i1=<span class="number">60</span>;</span><br><span class="line">        <span class="comment">//&amp;为位运算符,15是0000 0000 0000 1111,15&amp;60可以算出60的原貌</span></span><br><span class="line">        <span class="comment">//60是0000 0000 0011 1100 3C</span></span><br><span class="line">        <span class="type">int</span> i2=i1&amp;<span class="number">15</span>;</span><br><span class="line">        <span class="comment">//如果小于9则是123456789，如果大于9就转成ABCDE</span></span><br><span class="line">        <span class="comment">//以字符串的形式出现</span></span><br><span class="line">        String j=(i2&gt;<span class="number">9</span>)?(<span class="type">char</span>)(i2-<span class="number">10</span>+<span class="string">&#x27;A&#x27;</span>)+<span class="string">&quot;&quot;</span>:i2+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//右移四位</span></span><br><span class="line">        <span class="type">int</span> temp=i1&gt;&gt;&gt;<span class="number">4</span>;</span><br><span class="line">        i2=temp&amp;<span class="number">15</span>;</span><br><span class="line">        <span class="comment">//三目运算符 (条件表达式)?表达式1:表达式2</span></span><br><span class="line">        <span class="comment">//i2+&quot;&quot;=&quot;i2&quot;,转成字符串形式</span></span><br><span class="line">        String k=(i2&gt;<span class="number">9</span>)?(<span class="type">char</span>)(i2-<span class="number">10</span>+<span class="string">&#x27;A&#x27;</span>)+<span class="string">&quot;&quot;</span>:i2+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(k+<span class="string">&quot;&quot;</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 位运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之链表的头插和尾插法</title>
      <link href="/2021/07/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92%E5%92%8C%E5%B0%BE%E6%8F%92%E6%B3%95/"/>
      <url>/2021/07/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92%E5%92%8C%E5%B0%BE%E6%8F%92%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="插入思路"><a href="#插入思路" class="headerlink" title="插入思路"></a>插入思路</h3><p>我好像也没弄清楚</p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span><span class="comment">//node不能省略</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pNext</span>;</span><span class="comment">//指针大小是固定的</span></span><br><span class="line">&#125;Node_t, *pNode_t;</span><br></pre></td></tr></table></figure><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(pNode_t* ppHead, pNode_t* ppTail, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">pNode_t pNew = (pNode_t)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node_t));<span class="comment">//分配Node_t的大小</span></span><br><span class="line"><span class="built_in">memset</span>(pNew, <span class="number">0</span>, <span class="keyword">sizeof</span>(Node_t));</span><br><span class="line"><span class="comment">//指针域已经是空指针</span></span><br><span class="line">pNew-&gt;num = num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*ppHead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">*ppHead = pNew;</span><br><span class="line">*ppTail = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pNew-&gt;pNext = *ppHead;</span><br><span class="line">*ppHead = pNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/5gtGsAR2NDUkmap.jpg" alt="headInsert.jpg"></p><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(pNode_t* ppHead, pNode_t* ppTail, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">pNode_t pNew = (pNode_t)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(Node_t));<span class="comment">//分配Node_t的大小</span></span><br><span class="line"><span class="comment">//malloc+memset</span></span><br><span class="line">pNew-&gt;num = num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*ppHead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">*ppHead = pNew;</span><br><span class="line">*ppTail = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">(*ppTail)-&gt;pNext = pNew;</span><br><span class="line">*ppTail = pNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/qpiPb5tvyeTAFQm.jpg" alt="tailInsert.jpg"></p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">node.h:</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span><span class="comment">//node不能省略</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pNext</span>;</span><span class="comment">//指针大小是固定的</span></span><br><span class="line">&#125;Node_t, *pNode_t;</span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(pNode_t* ppHead, pNode_t* ppTail, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(pNode_t* ppHead, pNode_t* ppTail, <span class="type">int</span> num)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;node.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//pHead&amp;pTail用来标识链表，一开始为空链表</span></span><br><span class="line">pNode_t pHead = <span class="literal">NULL</span>;</span><br><span class="line">pNode_t pTail = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num) != EOF) &#123;</span><br><span class="line">headInsert(&amp;pHead, &amp;pTail, num);</span><br><span class="line">tailInsert(&amp;pHead, &amp;pTail, num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(pNode_t* ppHead, pNode_t* ppTail, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">pNode_t pNew = (pNode_t)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node_t));<span class="comment">//分配Node_t的大小</span></span><br><span class="line"><span class="built_in">memset</span>(pNew, <span class="number">0</span>, <span class="keyword">sizeof</span>(Node_t));</span><br><span class="line"><span class="comment">//指针域已经是空指针</span></span><br><span class="line">pNew-&gt;num = num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*ppHead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">*ppHead = pNew;</span><br><span class="line">*ppTail = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pNew-&gt;pNext = *ppHead;</span><br><span class="line">*ppHead = pNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(pNode_t* ppHead, pNode_t* ppTail, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">pNode_t pNew = (pNode_t)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(Node_t));<span class="comment">//分配Node_t的大小</span></span><br><span class="line"><span class="comment">//malloc+memset</span></span><br><span class="line">pNew-&gt;num = num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*ppHead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">*ppHead = pNew;</span><br><span class="line">*ppTail = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">(*ppTail)-&gt;pNext = pNew;</span><br><span class="line">*ppTail = pNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h3><p><img src="https://i.loli.net/2021/07/18/mDlvhnAGwYcRj2o.jpg" alt="malloc.jpg"></p><p><img src="https://i.loli.net/2021/07/18/oxsVcajO1KQJTAi.jpg" alt="memset.jpg"></p><p><img src="https://i.loli.net/2021/07/18/Pst4luT3njQ7Nfx.jpg" alt="calloc.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言之汉诺塔问题</title>
      <link href="/2021/07/13/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
      <url>/2021/07/13/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>&nbsp;&nbsp;有ABC三个区域，A区域上面从大到小落着多个盘子，B和C区域上面开始时没有盘子。现在要将A上的盘子按照从大到小的顺序放在C区域上，要求是小盘子上面不能落大盘子。</p><p><img src="https://i.loli.net/2021/07/13/DJ7Y1TKcO9hy3w8.jpg" alt="1.jpg"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>&nbsp;&nbsp;只有一个盘子，直接从A区域移动到C区域</p><h4 id="标准情况"><a href="#标准情况" class="headerlink" title="标准情况"></a>标准情况</h4><p>&nbsp;&nbsp;STEP1:将最大的一个盘子挪到C盘上</p><p>&nbsp;&nbsp;STEP2:将上面n-1个盘子挪到中间区域B区域上</p><p>&nbsp;&nbsp;STEP3:将B上的盘子挪到C上</p><p><img src="https://i.loli.net/2021/07/13/8G9sV4TWlh1ZvRt.jpg" alt="2.jpg"></p><h3 id="标准代码"><a href="#标准代码" class="headerlink" title="标准代码"></a>标准代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> from, <span class="type">char</span> buffer, <span class="type">char</span> to)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;move %c to %c\n&quot;</span>, from, to);<span class="comment">//只有一个盘子的时候将A上的盘子直接移动到第C个盘子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//@step1:将前n-1个盘子移动到第二个盘子（C为中间变量）</span></span><br><span class="line"><span class="comment">//@step2:将最后的一个盘子由A移动到C（B为中间变量）</span></span><br><span class="line"><span class="comment">//@step3:将在B上的盘子移动到C上（A为中间变量）</span></span><br><span class="line">hanoi(n - <span class="number">1</span>, from, to, buffer);</span><br><span class="line">hanoi(<span class="number">1</span>, from, buffer, to);</span><br><span class="line">hanoi(n - <span class="number">1</span>, buffer, from, to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">hanoi(<span class="number">4</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 递归调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言排序之索引排序</title>
      <link href="/2021/07/12/C%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F%E4%B9%8B%E7%B4%A2%E5%BC%95%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/07/12/C%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F%E4%B9%8B%E7%B4%A2%E5%BC%95%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>&nbsp;&nbsp;索引排序和冒泡排序的具体实现差不多，索引排序比冒泡排序更快。是利用地址来进行排序的</p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* parr[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">parr[i] = str[i];<span class="comment">//把字符串首地址赋值给数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(parr[j], parr[j + <span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">char</span>* tmp = parr[j];</span><br><span class="line">parr[j] = parr[j + <span class="number">1</span>];</span><br><span class="line">parr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printPointer</span><span class="params">(<span class="type">char</span>** parr, <span class="type">int</span> size)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line"><span class="built_in">puts</span>(parr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> str[][<span class="number">10</span>] = &#123;</span><br><span class="line"><span class="string">&quot;hello&quot;</span>,</span><br><span class="line"><span class="string">&quot;hi&quot;</span>,</span><br><span class="line"><span class="string">&quot;history&quot;</span>,</span><br><span class="line"><span class="string">&quot;world&quot;</span>,</span><br><span class="line"><span class="string">&quot;worth&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span>* parr[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">parr[i] = str[i];<span class="comment">//把字符串首地址赋值给数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(parr[j], parr[j + <span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">char</span>* tmp = parr[j];</span><br><span class="line">parr[j] = parr[j + <span class="number">1</span>];</span><br><span class="line">parr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printPointer(parr, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 算法实现 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的排序之冒泡排序</title>
      <link href="/2021/07/11/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/07/11/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是冒泡排序"><a href="#什么是冒泡排序" class="headerlink" title="什么是冒泡排序"></a>什么是冒泡排序</h3><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><blockquote><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol></blockquote><h4 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h4><blockquote><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：C_min = n-1,M_min = 0</p><p>所以，冒泡排序最好的<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">时间复杂度</a>为 O(n)。</p><p>若初始文件是反序的，需要进行n-1 趟排序。每趟排序要进行n-i次关键字的比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：</p><p>C_max = n(n-1)/2 = O(n^2)</p><p>M_max = 3n(n-1)/2 = O(n^2)</p><p>冒泡排序的最坏时间复杂度为 O(n^2)</p><p>综上，因此冒泡排序总的平均时间复杂度为 O(n^2)</p></blockquote><h4 id="自己理解"><a href="#自己理解" class="headerlink" title="自己理解"></a>自己理解</h4><p>&nbsp;&nbsp;就是说如果前一个数比后一个数大，两者就交换顺序，首先找出的是最大的数，第二次找出的是第二大的数，以此类推。排序轮数为外层循环，内层则是比较的次数。排序总轮数 = 元素个数-1，次数 = 元素个数-当前轮数-1（每轮的比较次数）</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="冒泡部分"><a href="#冒泡部分" class="headerlink" title="冒泡部分"></a>冒泡部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序总轮数 = 元素个数-1(一共排序要排8轮）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span><span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//内层循环的 次数 = 元素个数-当前轮数-1（每轮的比较次数）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>-i<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">//排序总轮数 = 元素个数-1(一共排序要排8轮）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span><span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//内层循环的 次数 = 元素个数-当前轮数-1（每轮的比较次数）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>-i<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/10/GvwPKtHAJ7LeUTW.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 算法实现 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言矩阵乘法</title>
      <link href="/2021/07/10/C%E8%AF%AD%E8%A8%80%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
      <url>/2021/07/10/C%E8%AF%AD%E8%A8%80%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;今天做到一个矩阵乘法的题，对这方面两个矩阵相乘不是很了解，在网上找到了解决方案学着写了一个，以后可能会修改当前的答案</p><h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr1[NUM][NUM], arr2[NUM][NUM];</span><br><span class="line"><span class="type">int</span> arr3[NUM][NUM] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> a, b, c, d;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入第一个矩阵的行列(a,b):\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d %d&quot;</span>, &amp;a,&amp;b);</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请依次输入行列式中的每个数：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; b; j++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;arr1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入第二个矩阵的行列(c,d):\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d %d&quot;</span>, &amp;c, &amp;d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请依次输入行列式中的每个数：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; d; j++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;arr2[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a != d) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; b; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; d; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根据行列式的公式进行计算</span></span><br><span class="line"><span class="comment">//@1.第一个行列式的行和第二个的列相乘</span></span><br><span class="line">arr3[i][j] = arr3[i][j] + arr1[i][k] * arr2[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;所得的行列式是：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; d; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr3[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;周末愉快！</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 二维数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的斐波那契数</title>
      <link href="/2021/04/04/Python%E4%B8%AD%E7%9A%84%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/"/>
      <url>/2021/04/04/Python%E4%B8%AD%E7%9A%84%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>斐波那契数列（Fibonacci sequence），又称<a href="https://baike.baidu.com/item/%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2/115896">黄金分割</a>数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“<a href="https://baike.baidu.com/item/%E5%85%94%E5%AD%90%E6%95%B0%E5%88%97/6849441">兔子数列</a>”，指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：<em>F</em>(0)=0，<em>F</em>(1)=1, <em>F</em>(n)=<em>F</em>(n - 1)+<em>F</em>(n - 2)（<em>n</em> ≥ 2，<em>n</em> ∈ N*）p;</p></blockquote><h3 id="求某个数的斐波那契数"><a href="#求某个数的斐波那契数" class="headerlink" title="求某个数的斐波那契数"></a>求某个数的斐波那契数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>可以通过上面这个函数体来求解</p><h3 id="判断某个数是否为斐波那契数"><a href="#判断某个数是否为斐波那契数" class="headerlink" title="判断某个数是否为斐波那契数"></a>判断某个数是否为斐波那契数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isfib</span>(<span class="params">n</span>):</span><br><span class="line">    phi = <span class="number">0.5</span> + <span class="number">0.5</span> * math.sqrt(<span class="number">5.0</span>)</span><br><span class="line">    a = phi * n</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">abs</span>(<span class="built_in">round</span>(a) - a) &lt; <span class="number">1.0</span> / n</span><br></pre></td></tr></table></figure><p>这是我目前找到的最有效的方法，直接用数学公式来求解。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 递归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中最基本的方法重载问题</title>
      <link href="/2021/03/27/Java%E4%B8%AD%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
      <url>/2021/03/27/Java%E4%B8%AD%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;方法的重载在java中是一个重要的的知识点，方法重载的最大特点是，方法的名称必须相同，但是<strong>参数列表</strong>必须不同,返回类型可以相同也可以不同。可以由下面这段代码来理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> method;</span><br><span class="line"><span class="comment">//方法的重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> max(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//调用int方法</span></span><br><span class="line">        <span class="comment">//double maxNum = max(2.0,3.0);调用double方法</span></span><br><span class="line">        <span class="comment">//调用哪个用哪个</span></span><br><span class="line">        System.out.println(maxNum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//int方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> num1)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(num == num1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个数相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num&gt;num1)&#123;</span><br><span class="line">            result = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result = num1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;<span class="comment">//终止方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//double方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num,<span class="type">double</span> num1)</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(num == num1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个数相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num&gt;num1)&#123;</span><br><span class="line">            result = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result = num1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;<span class="comment">//终止方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*public static double max(double num,double num1)//这是用double</span></span><br><span class="line"><span class="comment">    public static int max(int num,int num1)*/</span><span class="comment">//这是用int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用哪个用哪个。</p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> OOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的三角形打印</title>
      <link href="/2021/03/25/Java%E7%9A%84%E4%B8%89%E8%A7%92%E5%BD%A2%E6%89%93%E5%8D%B0/"/>
      <url>/2021/03/25/Java%E7%9A%84%E4%B8%89%E8%A7%92%E5%BD%A2%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;图形界面对于我而言是懵逼且痛苦的，可以说现阶段我在for循环中对于打印图形是最最最最头疼的。下面带来一道打印三角形的题目</p><h3 id="打印的三角形"><a href="#打印的三角形" class="headerlink" title="打印的三角形"></a>打印的三角形</h3><p><img src="https://i.loli.net/2021/03/25/BpdaVNL3WvM95RO.png" alt="image"></p><h3 id="实现的代码"><a href="#实现的代码" class="headerlink" title="实现的代码"></a>实现的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//外层循环，打印5排</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//打印三角形空白的上半部分</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>; j &gt;= i; j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打印三角形的下半部分</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt; i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每打印一行换行</span></span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自我理解"><a href="#自我理解" class="headerlink" title="自我理解"></a>自我理解</h3><p>&nbsp;&nbsp;对于打印三角形，首先是一个正方形，通过对称先打印一半，在打印另外一半时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt; i;j++)&#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时j&lt;i而不是&lt;=,学会利用debug</p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> for循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next()和nextLine()区别</title>
      <link href="/2021/03/22/next-%E5%92%8CnextLine-%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/03/22/next-%E5%92%8CnextLine-%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;Scanner有两类方法，一种是next系列方法，一种是nextLine系列方法。</p><h3 id="Scanner类的两种输入方式"><a href="#Scanner类的两种输入方式" class="headerlink" title="Scanner类的两种输入方式"></a>Scanner类的两种输入方式</h3><h4 id="nextLine"><a href="#nextLine" class="headerlink" title="nextLine()"></a>nextLine()</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>&nbsp;&nbsp;完整的接收一行字符串，从字符串的第一个字符开始，必须通过回车进行结束</p><h5 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mathe0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//接收数据输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用nextLine方式接收：&quot;</span>);</span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            <span class="comment">//程序等待用户输入完毕</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的方式为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO的类如果不关闭会占用资源</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以删除if语句，下面是运行截图</p><p><img src="https://i.loli.net/2021/03/22/JP1iqITmfM4EZLK.png" alt="image"></p><h4 id="next-方法"><a href="#next-方法" class="headerlink" title="next()方法"></a>next()方法</h4><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><p>&nbsp;&nbsp;next()方法中包含next/nextInt/nextDouble等方法，扫描从第一个非空字符开始，只要碰到空格，回车，制表符等就会结束扫描</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mathe0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//接收数据输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接收：&quot;</span>);</span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="comment">//程序等待用户输入完毕</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的方式为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是属于IO的类如果不关闭会占用资源</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是截图</p><p><img src="https://i.loli.net/2021/03/22/DMHoKzS9AtQhrNl.png" alt="image"></p><h3 id="问题和解答"><a href="#问题和解答" class="headerlink" title="问题和解答"></a>问题和解答</h3><p>&nbsp;&nbsp;Q：调用nextInt方法后直接调用nextLine方法得到一个空字符，不能正常运行。</p><p>&nbsp;&nbsp;A：回车作为nextInt方法的结束控制导致nextLine没有接收到任何字符，得到了一个空字符</p><p>&nbsp;&nbsp;S：重新new个对象/写两个nextLine方法</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;&nbsp;next系列和nextLine最好不要混用，最好使用nextLine方法</p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 输入引入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> Scanner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的命名规范和类型转换</title>
      <link href="/2021/03/21/Java%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/03/21/Java%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%92%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;这是一群最基础的但是很重要的知识</p><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><h5 id="类成员变量"><a href="#类成员变量" class="headerlink" title="类成员变量"></a>类成员变量</h5><p>&nbsp;&nbsp;首字母小写和驼峰原则。如firstName，monthSalary</p><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>&nbsp;&nbsp;首字母小写和驼峰原则(同类成员变量)</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>&nbsp;&nbsp;大写字母和下划线。如MAX_NUM</p><h5 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h5><p>&nbsp;&nbsp;首字母大写和驼峰原则。如NewItem</p><h5 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h5><p>&nbsp;&nbsp;首字母小写和驼峰原则。如run(),runRun()</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><h5 id="Attention："><a href="#Attention：" class="headerlink" title="Attention："></a>Attention：</h5><ol><li>Boolean不参与基本数据类型的转换</li><li>把整数类型转化成浮点型会有精度问题（有效位数发生变化）</li><li>把浮点型转化为整形也会精度丢失</li></ol><p>所有的由小范围转化为大范围都发生了自动类型转化，强制类型转化都会丢失精度</p><h5 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h5><ul><li>byte，short，char三种参与运算会全部提升到int类型</li><li>String字符串做加号拼接操作，无论怎么转换都是字符串类型</li><li>编译器不能识别浮点型，因为存储复杂，所以小数的默认类型都是double</li><li>扩展的赋值运算符隐含了强制运算符，有精度丢失的可能</li><li>赋值运算符形成的赋值表达式可以运行，结果是等号右边的值</li><li>引用数据类型用比较运算符连接的时候比较的是地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> 命名规范 </tag>
            
            <tag> 类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入单个字符滴几种方法</title>
      <link href="/2021/03/12/%E8%BE%93%E5%85%A5%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%BB%B4%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2021/03/12/%E8%BE%93%E5%85%A5%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%BB%B4%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;在课后作业中我遇到了这样一个问题。课后作业的题目是这样的:</p><blockquote><p>从键盘上输入一个数字或字母，程序判断后输出结果：输入的字符是数字还是字母（提示：通过ASCII值来判断是数字还是字母）</p></blockquote><p>&nbsp;&nbsp;那么问题就来了，输入的要求是字符，还要结合ASCII码表，课本也没有写输入单个字符的写法，在上网搜寻之后，我发现了有这样的几种写法：</p><h3 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = new Scanner(System.in);</span><br><span class="line">char b = in.next().charAt(0);</span><br></pre></td></tr></table></figure><p>这样的写法很简便，如果输入多个字符读取的只有第一个字符(当然这是理所当然的)</p><h3 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char b = in.next().toCharArray()[0];</span><br></pre></td></tr></table></figure><p>我没有试过</p><h3 id="写法三"><a href="#写法三" class="headerlink" title="写法三"></a>写法三</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">char b = (char)new BufferedReader(new InputStreamReader(System.in)).read()</span><br></pre></td></tr></table></figure><p>要导入很多包，很麻烦</p><p>以上都是在搜寻问题时找到的大佬归纳的答案。下面附上我对这道题的运行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test5 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner in = new Scanner(System.in);</span><br><span class="line">        System.out.print(&quot;请输入字符: &quot;);</span><br><span class="line">        char b = in.next().charAt(0);</span><br><span class="line">        if (b &gt;= 97 &amp;&amp; b &lt;= 122)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;小写&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (b &gt;= 65 &amp;&amp; b &lt;= 90)&#123;</span><br><span class="line">            System.out.println(&quot;大写&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(b &gt;= 48 &amp;&amp; b &lt;= 57)&#123;</span><br><span class="line">            System.out.println(&quot;数字&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            System.out.println(&quot;啥也不是&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是运行截图(我试试上传一个图片，还没有有用过这个功能^^)</p><p><img src="https://i.loli.net/2021/03/12/VYqfzh4HKjJw5Dt.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 输入引入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> 课堂思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Scanner的引入</title>
      <link href="/2021/03/11/%E5%85%B3%E4%BA%8EScanner%E7%9A%84%E5%BC%95%E5%85%A5/"/>
      <url>/2021/03/11/%E5%85%B3%E4%BA%8EScanner%E7%9A%84%E5%BC%95%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Java的输入问题"><a href="#Java的输入问题" class="headerlink" title="Java的输入问题"></a>Java的输入问题</h2><h3 id="对于包的引用"><a href="#对于包的引用" class="headerlink" title="对于包的引用"></a>对于包的引用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import java.until.Scanner//对于Scanner输入函数的包的引用</span><br></pre></td></tr></table></figure><h3 id="输入函数的结构体"><a href="#输入函数的结构体" class="headerlink" title="输入函数的结构体"></a>输入函数的结构体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in) //除sc外其余固定格式</span><br><span class="line">int a = sc.nextInt(); //输入整型</span><br><span class="line">double b = sc.nextDouble(); //double型</span><br><span class="line">String c = sc.nextString(); //字符型</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java语言 </category>
          
          <category> 输入引入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爪洼 </tag>
            
            <tag> Scanner </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
